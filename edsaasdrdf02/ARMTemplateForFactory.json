{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "edsaasdrdf02"
		},
		"HCMSftp_privateKeyContent": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKeyContent' of 'HCMSftp'"
		},
		"HCMSftp_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'HCMSftp'"
		},
		"ROSSSftp_privateKeyContent": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKeyContent' of 'ROSSSftp'"
		},
		"ROSSSftp_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'ROSSSftp'"
		},
		"edsaasdrdb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'edsaasdrdb'"
		},
		"edsaasdrfc_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'edsaasdrfc'"
		},
		"egsaasdrBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'egsaasdrBlobStorage'"
		},
		"fusionSftp_privateKeyContent": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKeyContent' of 'fusionSftp'"
		},
		"fusionSftp_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'fusionSftp'"
		},
		"urbanizedb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'urbanizedb'"
		},
		"ADHOC_BLOB_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"ADHOC_BLOB_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FileLocation"
		},
		"BACKUP_ZIP_FUSION_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "egsaasdrblob01/uem/dev/edgenta/azure/outbound/archive/src"
		},
		"FILE_FUSION_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"FILE_FUSION_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().InterfaceFolder,'-1'),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder))"
		},
		"FOLDER_FUSION_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().FolderName,'-1'),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder,'/',dataset().FolderName))"
		},
		"FOLDER_ROSS_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().FolderName,'-1'),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder,'/',dataset().FolderName))"
		},
		"FUSION_FileShare_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().fileName"
		},
		"FUSION_FileShare_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().fileLocation"
		},
		"Fusion_FlatFileShare_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().fileName"
		},
		"Fusion_FlatFileShare_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().fileLocation"
		},
		"Fusion_FolderShare_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"Fusion_FolderShare_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().fileLocation"
		},
		"OUT_ARCHIVE_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@concat('egsaasdrblob01/uem/dev/edgenta/azure/outbound/archive/src/',dataset().Department,'/',dataset().InterfaceName)"
		},
		"OUT_SOURCE_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@concat('egsaasdrblob01/uem/dev/edgenta/azure/outbound/main/src/',dataset().Department,'/',dataset().InterfaceName)"
		},
		"OUT_SOURCE_FILE_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"OUT_SOURCE_FILE_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@concat('/uem/dev/edgenta/azure/outbound/main/src/',dataset().Department,'/',dataset().InterfaceName)"
		},
		"OUT_STAGING_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@concat('egsaasdrblob01/uem/dev/edgenta/azure/outbound/main/stg/',dataset().Department,'/',dataset().InterfaceName)"
		},
		"OUT_STAGING_FILE_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@replace(dataset().FileName,'zip','csv')"
		},
		"OUT_STAGING_FILE_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@concat('egsaasdrblob01/uem/dev/edgenta/azure/outbound/main/stg/',dataset().Department,'/',dataset().InterfaceName,'/dataset().FileName')"
		},
		"ROSSFileShare_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"ROSSFileShare_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FileLocation"
		},
		"ROSSFileShareZip_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"ROSSFileShareZip_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FileLocation"
		},
		"ROSSFolderShare_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"ROSSFolderShare_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FileLocation"
		},
		"ZIP_FILE_FUS_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().InterfaceFolder,'-1'),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder))"
		},
		"ZIP_FILE_FUSION_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().InterfaceFolder,'-1'),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder))"
		},
		"ZIP_FILE_ROSS_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@concat(dataset().FileName)"
		},
		"ZIP_FILE_ROSS_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().FolderName,'-1'),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department,'/',dataset().InterfaceFolder),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department,'/',dataset().InterfaceFolder,'/',dataset().FolderName))"
		},
		"ZIP_FILE_ROSS_CS_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@concat(dataset().FileName)"
		},
		"ZIP_FILE_ROSS_CS_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().FolderName,'-1'),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department,'/',dataset().InterfaceFolder),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department,'/',dataset().InterfaceFolder,'/',dataset().FolderName))"
		},
		"ZIP_FUSION_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().ZipName"
		},
		"ZIP_FUSION_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().InterfaceFolder,'-1'),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department),concat('egsaasdrblob01/',dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder))"
		},
		"ZIP_ROSS_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().ZipName,'-1'),'',dataset().ZipName)"
		},
		"ZIP_ROSS_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().InterfaceFolder,'-1'),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department,'/',dataset().InterfaceFolder))"
		},
		"ZIP_ROSS_FOR_SFTP_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().ZipName,'-1'),'',dataset().ZipName)"
		},
		"ZIP_ROSS_FOR_SFTP_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@if(equals(dataset().InterfaceFolder,'-1'),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department),concat('egsaasdrblob01/',dataset().FolderPath,'/',dataset().Department,'/',dataset().InterfaceFolder))"
		},
		"HCMSftp_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "129.154.84.0"
		},
		"HCMSftp_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "dev_timeclock"
		},
		"ROSSSftp_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "sftp01.uemedgenta.com"
		},
		"ROSSSftp_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "oracle"
		},
		"fusionSftp_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "129.154.84.0"
		},
		"fusionSftp_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "edgenta_int"
		},
		"0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
		},
		"0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_201"
		},
		"0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
		},
		"0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_203"
		},
		"0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketAgreement"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_204"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_205"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
		},
		"0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_201"
		},
		"0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
		},
		"0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_203"
		},
		"0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketAgreement"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_204"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_205"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_231"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_231"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
		},
		"0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_PPM_206"
		},
		"0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "ppm"
		},
		"0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/supplierPayment"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_FIN_249"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "fin"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/arInvoice"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_FIN_252"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "fin"
		},
		"0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_205"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
		},
		"1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_FIN_267"
		},
		"1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "fin"
		},
		"1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_205"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_231"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
		},
		"1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_PPM_206"
		},
		"1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "ppm"
		},
		"1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/invoiceReceipt"
		},
		"1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_FIN_254"
		},
		"1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "fin"
		},
		"1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/approvedcop"
		},
		"1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_303"
		},
		"1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/arCreditNote"
		},
		"1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_FIN_253"
		},
		"1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "fin"
		},
		"1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_PPM_337"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "ppm"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/costaccrual"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_PPM_363"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "ppm"
		},
		"1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_fileLocation": {
			"type": "string",
			"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
		},
		"1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_interfaceName": {
			"type": "string",
			"defaultValue": "INT_SCM_205"
		},
		"1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_Department": {
			"type": "string",
			"defaultValue": "scm"
		},
		"1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_ScheduleType": {
			"type": "string",
			"defaultValue": "1"
		},
		"egsaasdrir_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "edsgdrsql02.database.windows.net"
		},
		"egsaasdrir_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"egsaasdrir_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADHOC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Declare File",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.fileName,'')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_1B",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceId",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": "1"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute Folder",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceId",
												"type": "Expression"
											},
											"Department": {
												"value": "@substring(pipeline().parameters.interfaceId,4,3)",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "INT_PPM_337_BILLINGEVENTS_000153_IMPORT_2019081912174525.zip"
					},
					"sourceSystem": {
						"type": "string",
						"defaultValue": "Edgenta-Azure"
					},
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents"
					},
					"interfaceId": {
						"type": "string",
						"defaultValue": "INT_PPM_337"
					}
				},
				"variables": {
					"TriggerBy": {
						"type": "String",
						"defaultValue": "ADHOC"
					},
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_1B')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_LOG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Add Step Input",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.EventID,'\",\n\"EventName\" : \"',pipeline().parameters.EventName,'\",\n\"FileZipName\" : \"',pipeline().parameters.FileZipName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.FileZipName,'zip','csv'),'\",\n\"Object\" : \"',pipeline().parameters.Object,'\",\n\"SourceSystem\" : \"',pipeline().parameters.SourceSystem,'\",\n\"DestSystem\" : \"',pipeline().parameters.DestSystem,'\",\n\"JobId\" : \"',pipeline().parameters.JobID,'\",\n\"ActivityTask\" : \"',pipeline().parameters.ActivityTask,'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',pipeline().parameters.StartTime,'\",\n\"EndTime\" : \"',pipeline().parameters.EndTime,'\",\n\"Status\" : \"',pipeline().parameters.Status,'\",\n\"Output\" : ',pipeline().parameters.Input,',\n\"Error\" : ',pipeline().parameters.Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 3,\n\"EventType\" : \"',pipeline().parameters.EventType,'\",\n\"FilePath\" : \"',pipeline().parameters.FilePath,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add StepOutput",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Add Step Input",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.EventID,'\",\n\"EventName\" : \"',pipeline().parameters.EventName,'\",\n\"FileZipName\" : \"',pipeline().parameters.FileZipName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.FileZipName,'zip','csv'),'\",\n\"Object\" : \"',pipeline().parameters.Object,'\",\n\"SourceSystem\" : \"',pipeline().parameters.SourceSystem,'\",\n\"DestSystem\" : \"',pipeline().parameters.DestSystem,'\",\n\"JobId\" : \"',pipeline().parameters.JobID,'\",\n\"ActivityTask\" : \"',pipeline().parameters.ActivityTask,'\",\n\"ActivityType\" : \"2\",\n\"StartTime\" : \"',pipeline().parameters.StartTime,'\",\n\"EndTime\" : \"',pipeline().parameters.EndTime,'\",\n\"Status\" : \"',pipeline().parameters.Status,'\",\n\"Output\" : ',pipeline().parameters.Output,',\n\"Error\" : ',pipeline().parameters.Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 3,\n\"EventType\" : \"',pipeline().parameters.EventType,'\",\n\"FilePath\" : \"',pipeline().parameters.FilePath,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"EventID": {
						"type": "string"
					},
					"EventName": {
						"type": "string"
					},
					"FileZipName": {
						"type": "string"
					},
					"Object": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestSystem": {
						"type": "string"
					},
					"JobID": {
						"type": "string"
					},
					"ActivityTask": {
						"type": "string"
					},
					"StartTime": {
						"type": "string"
					},
					"EndTime": {
						"type": "string"
					},
					"Status": {
						"type": "string"
					},
					"Output": {
						"type": "string"
					},
					"Error": {
						"type": "string"
					},
					"ErrorLoc": {
						"type": "string"
					},
					"EventType": {
						"type": "string"
					},
					"FilePath": {
						"type": "string"
					},
					"Input": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Error Report File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Daily Summary File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip [File Name],InterfaceID [Interface ID],sch.CodeDesc [Schedule Type],BusinessObject [Business Object],starttime [Start Time],endtime [End Time],\nEventMessage [Error Step],ErrorMessage [Error Message],cm.CodeDesc [Process Status],ISNULL([data status],'''') [Data Transaction Status] \nfrom EventLog el\ninner join CodeMaster cm on el.Status = cm.Code and cm.CodeType = ''STS''\ninner join CodeMaster sch on el.ScheduleType = sch.Code and sch.CodeType = ''SCH''\nouter apply (\n\tselect ''FAIL'' [Data Status]\n\tfrom ETLAudit ea\n\twhere el.EventID = ea.EventID and RowFailed > 0\n) a\nwhere el.ScheduleID <> '''' and el.ScheduleID <> ''1'' and EventType = ''O'' and (Status = 2 or [Data Status] = ''FAIL'') \nand CAST(StartTime as date) = CAST(''',pipeline().parameters.SingularDate,''' as date)\norder by StartTime')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DELIMITED_TEXT",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@replace(pipeline().parameters.SingularDate,'-','')",
										"type": "Expression"
									},
									"FileName": "EVENTLOG.csv",
									"PathFolder": {
										"value": "@variables('Folder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "File List Lookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Daily Summary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip\nfrom EventLog el\ninner join CodeMaster cm on el.Status = cm.Code and cm.CodeType = ''STS''\ninner join CodeMaster sch on el.ScheduleType = sch.Code and sch.CodeType = ''SCH''\nouter apply (\n\tselect ''FAIL'' [Data Status]\n\tfrom ETLAudit ea\n\twhere el.EventID = ea.EventID and RowFailed > 0\n) a\nwhere el.ScheduleID <> '''' and el.ScheduleID <> ''1'' and EventType = ''O'' and (Status = 2 or [Data Status] = ''FAIL'') \nand CAST(StartTime as date) = CAST(''',pipeline().parameters.SingularDate,''' as date)\n')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File List Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File List Lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "EVENTTASKLOG File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT SeqNo,StepName,StepDescription,etl.StartTime,etl.EndTime,StepInput,StepOutput,st.CodeDesc [Status],etl.ErrorMessage FROM EventTaskLog etl inner join EventTaskLogStatus st on etl.Status = st.Code\nINNER JOIN EventLog el on etl.EventID = el.EventID\nwhere FileNameZip = ''',item().fileNameZip,'''\norder by SeqNo')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DELIMITED_TEXT",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(replace(pipeline().parameters.SingularDate,'-',''),'/',item().fileNameZip)",
													"type": "Expression"
												},
												"FileName": "EVENTTASKLOG.csv",
												"PathFolder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ETLDATAAUDIT File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "EVENTTASKLOG File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select FileLine,cm.CodeDesc [Process Status],st.CodeDesc [Status], \n\tCASE WHEN etl.PackageType = 1 and isFailLoad = 0  THEN ''Success''\n\tWHEN etl.PackageType = 2 and flg is NULL THEN ''''\n\tWHEN etl.PackageType = 2 and flg = 1 and isFailLoad = 0 THEN ''Success''\n\tWHEN  etl.PackageType = 2 and flg = 1 and isFailLoad = 1 THEN ''Failed'' END [Data Validation],\nMessage\nfrom ETLDataAudit etl\nINNER JOIN EventLog el on etl.EventID = el.EventID \nINNER JOIN CodeMaster cm on cm.code = etl.PackageType and cm.CodeType = ''PKT''\nINNER JOIN Codemaster st on etl.status = st.code and st.codetype = ''STS''\nOUTER APPLY(\n\tSELECT 1 flg\n\tFROM ETLAudit ea\n\tWHERE el.EventID = ea.EventID and ea.PackageType = ''3''\n) a\nwhere el.FileNameZip = ''',item().fileNameZip,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DELIMITED_TEXT",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(replace(pipeline().parameters.SingularDate,'-',''),'/',item().fileNameZip)",
													"type": "Expression"
												},
												"FileName": "ETLDATAAUDIT.csv",
												"PathFolder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ZIP File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ETLDATAAUDIT File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@replace(pipeline().parameters.SingularDate,'-','')",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@item().fileNameZip",
													"type": "Expression"
												},
												"FileName": "*",
												"FolderPath": {
													"value": "@variables('Folder')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@replace(pipeline().parameters.SingularDate,'-','')",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@replace(replace(item().fileNameZip,'.zip','_errorfile.zip'),'EXPORT','Export')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@variables('Folder')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ZIP File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@replace(pipeline().parameters.SingularDate,'-','')",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@item().fileNameZip",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('Folder')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"recursive": true
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SingularDate": {
						"type": "string",
						"defaultValue": "2019-10-08"
					}
				},
				"variables": {
					"Folder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure"
					},
					"Department": {
						"type": "String",
						"defaultValue": "errorfile"
					},
					"Interface": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/DELIMITED_TEXT')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Error Report File Generating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Date List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct CAST(StartTime as date) Date\nfrom EventLog el\ninner join CodeMaster cm on el.Status = cm.Code and cm.CodeType = ''STS''\ninner join CodeMaster sch on el.ScheduleType = sch.Code and sch.CodeType = ''SCH''\nouter apply (\n\tselect ''FAIL'' [Data Status]\n\tfrom ETLAudit ea\n\twhere el.EventID = ea.EventID and RowFailed > 0\n) a\nwhere el.ScheduleID <> '''' and el.ScheduleID <> ''1'' and EventType = ''O'' and (Status = 2 or [Data Status] = ''FAIL'') \nand CAST(StartTime as date) BETWEEN CAST(''',pipeline().parameters.StartDate,''' as date) and CAST(''',pipeline().parameters.EndDate,''' as date)')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Date List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Date List').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Generate Error Report",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Daily Error Report File",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SingularDate": {
												"value": "@formatDateTime(item().Date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StartDate": {
						"type": "string",
						"defaultValue": "2019-10-01"
					},
					"EndDate": {
						"type": "string"
					}
				},
				"variables": {
					"test": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/Daily Error Report File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_249_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplierPayment\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/sit/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_249_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"SUPPLIERPAYMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplierPayment\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/sit/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplierPayment\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"supplierPayment\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"invoiceReceipt\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_249"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_249_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/sit/edgenta/azure/outbound/fin/supplierPayment"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_249"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_249_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_249_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_249.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_249_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "FIN_249"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_FIN_249_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "supplierpayment"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_FIN_249"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_249_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_249_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"supplierPayment\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_249_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"supplierPayment\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"supplierPayment\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/fin/supplierPayment",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/supplierpayment/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_FIN_249"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_249"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_252_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_252_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ARINVOICE\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"arInvoice\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"invoiceReceipt\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_252"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_252_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/arinvoice"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_252"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_252_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_252_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_252.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_252_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "FIN_252"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_FIN_252_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "arinvoice"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					}
				},
				"folder": {
					"name": "INT_FIN_252"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_252_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_252_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_252_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/fin/arInvoice",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/arinvoice/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_FIN_252"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_252"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_253_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"arCreditNote\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_253_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ARCREDITNOTE\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"arCreditNote\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"arCreditNote\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"arCreditNote\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"invoiceReceipt\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_253"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_253_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/arCreditNote"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_253"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_253_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_253_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_253.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_253_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "FIN_253"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_FIN_253_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "arcreditnote"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_FIN_253"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_253_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/acreditnote\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_253"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_253_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_253_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"arcreditnote\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_253_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											}
										}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"arcreditnote\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"arcreditnote\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/fin/arcreditnote",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/arcreditnote/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_FIN_253"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_253"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_254_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_254_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_254"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_254_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/invoiceReceipt"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_254"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_254_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_254_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_254.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_254_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "FIN_254"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_FIN_254_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "invoicereceipt"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_FIN_254"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_254_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/customer\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_254"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_254_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_254_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_254_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											}
										}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"invoiceReceipt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/fin/invoiceReceipt",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Failed Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/invoicereceipt/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_FIN_254"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_254"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/INT_FIN_267.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/INT_FIN_267_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "FIN_267"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "customer"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3_BS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('File Generating').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('File Generating').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/fin/267",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_FIN_267_CUSTOMER]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "FIN_267"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "customer"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_FIN_267_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3_BS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/customer\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_267_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_FIN/FIN_267_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/fin/customer",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/customer/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_FIN_267"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.06:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Fail",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_FIN_267_CUSTOMER_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/ppm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_FIN_267_CUSTOMER_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/customer/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_FIN_267"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If INT_PPM_206",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_PPM_206')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline3",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_PPM_206_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_205",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_SCM_205')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline9",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_SCM_205_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_201",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_SCM_201')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline4",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_SCM_201_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_203",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_SCM_203')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_SCM_203_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_253",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_FIN_253')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline8",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_FIN_253_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_254",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_FIN_254')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline7",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_FIN_254_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_267",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_FIN_267')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_FIN_267_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_204",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_SCM_204')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline5",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_SCM_204_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_231",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.interfaceName,'INT_SCM_231')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline6",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "INT_SCM_231_DIR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"interfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": "2"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"test": {
						"type": "Array"
					},
					"test2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_PPM_206_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_205_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_201_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_203_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_253_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_254_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_267_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_204_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_231_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_ERROR_LOG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Create Error Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"egsaasdrblob01/',concat(pipeline().parameters.LogFolder,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Create Error Log",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/log/error-log",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\"filePath\": \"/egsaasdrblob01/',pipeline().parameters.LogFolder,'\",\n\"fileName\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt\"\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "Basic",
								"username": "uem_edgenta",
								"password": {
									"type": "SecureString",
									"value": "**********"
								}
							}
						}
					}
				],
				"parameters": {
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "205af391-e0ef-4b29-a0a5-b25c79da186f"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"zipfileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_51034_20190703024120.zip"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"SourceSystem": {
						"type": "string",
						"defaultValue": "ORACLE"
					}
				},
				"variables": {
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"FolderName": {
						"type": "String",
						"defaultValue": "project"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_FILE_BACKUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Backup Source File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 6,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@concat(pipeline().parameters.InterfaceName,'/processedfile')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@concat(pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"FolderName": "processedfile",
									"PathFolder": {
										"value": "@pipeline().parameters.DestinationArchiveFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Source File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@concat(pipeline().parameters.InterfaceName,'/processedfile')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Add Log for Source File Backup",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.FileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Source File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.SourceSystem,' Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Source File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Source File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Source File').Status,'\",\n\"Output\" : ',activity('Backup Source File').Output,',\n\"Error\" : ',activity('Backup Source File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.SourceSystem,' source file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_IN_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\", \"outputPath\": \"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/checksum.txt\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@replace(last(split(activity('Get FileName').Output.firstRow.Destination,'/')),'.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE packagetype =''5'' and EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate ',pipeline().parameters.DestinationSystem,' Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' checksum generating after .CSV file has generated successfully\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ROSS Copy Processing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_IN_PART_3A",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"Foldername": {
									"value": "@pipeline().parameters.Foldername",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_IN_PART_3A')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_IN_PART_3A')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Compress Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FILE_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"FileName": {
										"value": "*",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for File Compression",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ',pipeline().parameters.DestinationSystem,' Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing ',pipeline().parameters.DestinationSystem,' folder into .ZIP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send to ORACLE SFTP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"fileName\":\"',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"sftpTarget\":\"/uem/dev/edgenta/azure/inbound/',pipeline().parameters.Department,'/',pipeline().parameters.Foldername,'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for File Sending",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Fusion-Oracle\",\n\"JobId\" : \"',activity('Send to ORACLE SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to SFTP for ',pipeline().parameters.DestinationSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ORACLE SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ORACLE SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ORACLE SFTP').Status,'\",\n\"Output\" : ',activity('Send to ORACLE SFTP').Output,',\n\"Error\" : ',activity('Send to ORACLE SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to Oracle SFTP ',pipeline().parameters.DestinationSystem,' from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline for Trigger",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_TRIGGER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_IN_PART_3A_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Compress Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FILE_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"FileName": {
										"value": "*",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for File Compression",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ',pipeline().parameters.DestinationSystem,' Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing ',pipeline().parameters.DestinationSystem,' folder into .ZIP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send to ORACLE SFTP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"fileName\":\"',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"sftpTarget\":\"/uem/dev/edgenta/azure/inbound/',pipeline().parameters.Department,'/',pipeline().parameters.Foldername,'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for File Sending",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Fusion-Oracle\",\n\"JobId\" : \"',activity('Send to ORACLE SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to SFTP for ',pipeline().parameters.DestinationSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ORACLE SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ORACLE SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ORACLE SFTP').Status,'\",\n\"Output\" : ',activity('Send to ORACLE SFTP').Output,',\n\"Error\" : ',activity('Send to ORACLE SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to Oracle SFTP ',pipeline().parameters.DestinationSystem,' from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline for Trigger",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_TRIGGER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_IN_PART_3_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\", \"outputPath\": \"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/checksum.txt\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@replace(last(split(activity('Get FileName').Output.firstRow.Destination,'/')),'.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE packagetype =''5'' and EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate ',pipeline().parameters.DestinationSystem,' Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' checksum generating after .CSV file has generated successfully\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ROSS Copy Processing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_IN_PART_3A_SP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"Foldername": {
									"value": "@pipeline().parameters.Foldername",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_IN_PART_3A_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_1B",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@pipeline().parameters.FileName",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by source system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the success message of received file via API of source system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 6,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceArchiveFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Source File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Add Log for Source File Backup",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Source File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup Source File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Source File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Source File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Source File').Status,'\",\n\"Output\" : ',activity('Backup Source File').Output,',\n\"Error\" : ',activity('Backup Source File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup source file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_253"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_253_ARCREDITNOTE_Export_45200_20190523113209.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/arCreditNote"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_1B')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_PART_1B')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If INT_PPM_206",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_PPM_206')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline3",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "ppm",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_205",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_SCM_205')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline9",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "scm",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_201",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_SCM_201')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline4",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "scm",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_203",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_SCM_203')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "scm",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_253",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_FIN_253')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline8",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_253_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "fin",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_254",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_FIN_254')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline7",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_254_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "fin",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_267",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_FIN_267')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "fin",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_204",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_SCM_204')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline5",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "scm",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_231",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_SCM_231')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline6",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "scm",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(pipeline().parameters.FileName,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',pipeline().parameters.FileName,'\"}')))))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "SetVariable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ZipFileName",
										"value": {
											"value": "@pipeline().parameters.FileName",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_337",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_PPM_337')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline10",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": "uem/dev/edgenta/azure/inbound/main/destination",
											"LogFolder": "uem/dev/edgenta/azure/inbound/log/",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": "ppm",
											"DestinationArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/destination",
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ROSS",
											"DestinationSystem": "ORACLE"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_252",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_FIN_252')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline11",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_252_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "fin",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_249",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_FIN_249')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline12",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_249_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"Department": "fin",
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ORACLE",
											"DestinationSystem": "ROSS"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_363",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_PPM_363')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline13",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": "uem/dev/edgenta/azure/inbound/main/destination",
											"LogFolder": "uem/dev/edgenta/azure/inbound/log/",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": "ppm",
											"DestinationArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/destination",
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ROSS",
											"DestinationSystem": "ORACLE"
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_303",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('ZipFileName'),'INT_SCM_303')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline14",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_303_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": "uem/dev/edgenta/azure/inbound/main/destination",
											"LogFolder": "uem/dev/edgenta/azure/inbound/log/",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": "scm",
											"DestinationArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/destination",
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.FileLocation",
												"type": "Expression"
											},
											"ScheduleType": "2",
											"SourceSystem": "ROSS",
											"DestinationSystem": "ORACLE"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FileLocation": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_1_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_1_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_1_SP')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_253_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_254_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_1_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_1_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_337_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_252_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_249_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_363_PART_1')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\", \"outputPath\": \"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/checksum.txt\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@replace(last(split(activity('Get FileName').Output.firstRow.Destination,'/')),'.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE packagetype =''2'' and EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate ',pipeline().parameters.DestinationSystem,' Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' checksum generating after .CSV file has generated successfully\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ROSS Copy Processing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_PART_3A",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"Foldername": {
									"value": "@pipeline().parameters.Foldername",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3A')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_PART_3A')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Compress Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FILE_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"FileName": {
										"value": "*",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for File Compression",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ',pipeline().parameters.DestinationSystem,' Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing ',pipeline().parameters.DestinationSystem,' folder into .ZIP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send to ROSS SFTP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/ross",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"fileName\":\"',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/',pipeline().parameters.Foldername,'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for File Sending",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send to ROSS SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to Azure SFTP for ',pipeline().parameters.DestinationSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to Azure SFTP ',pipeline().parameters.DestinationSystem,' from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Trigger ROSS API",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ROSS SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ROSS_ADHOC",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"FileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"InterfaceID": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_ROSS_ADHOC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_PART_3A_BS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Compress Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FILE_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"FileName": {
										"value": "*",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@concat(pipeline().parameters.ZipFileName,'.zip')",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for File Compression",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ',pipeline().parameters.DestinationSystem,' Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing ',pipeline().parameters.DestinationSystem,' folder into .ZIP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for File Sending",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send File to BLOB SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send File to BLOB SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to Azure SFTP for ',pipeline().parameters.DestinationSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send File to BLOB SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send File to BLOB SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send File to BLOB SFTP').Status,'\",\n\"Output\" : ',activity('Send File to BLOB SFTP').Output,',\n\"Error\" : ',activity('Send File to BLOB SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to Azure SFTP ',pipeline().parameters.DestinationSystem,' from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Trigger ROSS API",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File to BLOB SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ROSS_ADHOC",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"FileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"InterfaceID": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send File to BLOB SFTP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/ross",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"fileName\":\"',concat(pipeline().parameters.ZipFileName,'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/',pipeline().parameters.Foldername,'\"}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_ROSS_ADHOC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_PART_3_BS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\", \"outputPath\": \"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/checksum.txt\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@replace(last(split(activity('Get FileName').Output.firstRow.Destination,'/')),'.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE packagetype =''2'' and EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate ',pipeline().parameters.DestinationSystem,' Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' checksum generating after .CSV file has generated successfully\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ROSS Copy Processing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_PART_3A_BS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"Foldername": {
									"value": "@pipeline().parameters.Foldername",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3A_BS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_ROSS_ADHOC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Adhoc Trigger",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ScheduleType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ScheduleType').output.firstRow.ScheduleType,'2')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Trigger ROSS",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://ross.uemedgenta.com:8060/api/file/GetFileName_SIT",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n  \"FileNamePass\": \"',concat(pipeline().parameters.FileName,'.zip'),'\",\n  \"Interface_ID\": \"',pipeline().parameters.InterfaceID,'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "ROSS",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for ROSS Trigger",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Trigger ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Object": "WORKTYPENUMBER",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "Edgenta-ROSS",
											"JobID": {
												"value": "@activity('Trigger ROSS').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": "Send Trigger File Request to ROSS",
											"StartTime": {
												"value": "@activity('Trigger ROSS').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Trigger ROSS').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@activity('Trigger ROSS').Status",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Trigger ROSS').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Trigger ROSS').Error),'',activity('Trigger ROSS').Error)",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of triggering ROSS ADHOC API",
											"Input": {
												"value": "@concat('{\n  \"FileNamePass\": \"',concat(pipeline().parameters.FileName,'.zip'),'\",\n  \"Interface_ID\": \"',pipeline().parameters.InterfaceID,'\"\n}')",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.FileName",
												"type": "Expression"
											},
											"ErrorLoc": "-"
										}
									}
								}
							]
						}
					},
					{
						"name": "ScheduleType",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select scheduletype from eventlog where eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_252_ARINVOICE_Export_112958_20190726040518.zip"
					},
					"InterfaceID": {
						"type": "string",
						"defaultValue": "INT_FIN_252"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "7ca08189-1283-4f09-ac8c-d02c81863e4f"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_SOURCE_BACKUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Backup Source File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 6,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceArchiveFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Source File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"recursive": true
						}
					},
					{
						"name": "Add Log for Source File Backup",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.FileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Source File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.SourceSystem,' Source File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Source File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Source File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Source File').Status,'\",\n\"Output\" : ',activity('Backup Source File').Output,',\n\"Error\" : ',activity('Backup Source File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.SourceSystem,' source file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_SOURCE_BACKUP_FILE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Backup Source File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 6,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.SourceArchiveFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Source File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Add Log for Source File Backup",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.FileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Source File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.SourceSystem,' Source File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Source File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Source File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Source File').Status,'\",\n\"Output\" : ',activity('Backup Source File').Output,',\n\"Error\" : ',activity('Backup Source File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.SourceSystem,' source file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GENERAL_TRIGGER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If 337",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.InterfaceName,'INT_PPM_337')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Trigger for 337",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://uemaoicdev01-uemgroup.integration.ocp.oraclecloud.com/ic/api/integration/v1/integrations/INT_PPM_BILLINGE_EXTERNAL%7C01.00.0000/schedule/jobs",
										"method": "POST",
										"headers": {},
										"body": {
											"action": "NOW"
										},
										"authentication": {
											"type": "Basic",
											"username": "erp_int_user",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Trigger for 337",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Object": "WORKTYPENUMBER",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "UEMGroup-Oracle",
											"JobID": {
												"value": "@activity('Send Trigger for 337').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": "Send Trigger File Request to ORACLE",
											"StartTime": {
												"value": "@activity('Send Trigger for 337').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Trigger for 337').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@activity('Send Trigger for 337').Status",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Trigger for 337').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Trigger for 337').Error),'',activity('Send Trigger for 337').Error)",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send request to ORACLE API",
											"Input": "{\n\t\"action\":\"NOW\"\n}",
											"FileZipName": "tes"
										}
									}
								}
							]
						}
					},
					{
						"name": "If 363",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.InterfaceName,'INT_PPM_363')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Trigger for 363",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://uemaoicdev01-uemgroup.integration.ocp.oraclecloud.com/ic/api/integration/v1/integrations/INT_PPM_COSTACCR_EXTERNAL%7C01.00.0000/schedule/jobs",
										"method": "POST",
										"headers": {},
										"body": {
											"action": "NOW"
										},
										"authentication": {
											"type": "Basic",
											"username": "erp_int_user",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Trigger for 363",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Object": "WORKTYPENUMBER",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "UEMGroup-Oracle",
											"JobID": {
												"value": "@activity('Send Trigger for 363').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": "Send Trigger File Request to ORACLE",
											"StartTime": {
												"value": "@activity('Send Trigger for 363').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Trigger for 363').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@activity('Send Trigger for 363').Status",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Trigger for 363').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Trigger for 363').Error),'',activity('Send Trigger for 363').Error)",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send request to ORACLE API",
											"Input": "{\n\t\"action\":\"NOW\"\n}",
											"FileZipName": "tes"
										}
									}
								}
							]
						}
					},
					{
						"name": "If 303",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.InterfaceName,'INT_SCM_303')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Trigger for 303",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://uemaoicdev01-uemgroup.integration.ocp.oraclecloud.com/ic/api/integration/v1/integrations/INT_SCM_303_MASTERPR%7C01.00.0000/schedule/jobs",
										"method": "POST",
										"headers": {},
										"body": {
											"action": "NOW"
										},
										"authentication": {
											"type": "Basic",
											"username": "erp_int_user",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "ExecutePipeline3",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Trigger for 303",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Object": "WORKTYPENUMBER",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "UEMGroup-Oracle",
											"JobID": {
												"value": "@activity('Send Trigger for 303').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": "Send Trigger File Request to ORACLE",
											"StartTime": {
												"value": "@activity('Send Trigger for 303').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Trigger for 303').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@activity('Send Trigger for 303').Status",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Trigger for 303').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Trigger for 303').Error),'',activity('Send Trigger for 303').Error)",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send request to ORACLE API",
											"Input": "{\n\t\"action\":\"NOW\"\n}",
											"FileZipName": "tes"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string"
					},
					"ParentPipelineID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HCM Data Loading SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "HCM Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.SourceFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.fileName),'\",\"fileName\":\"',pipeline().parameters.fileName,'\",\"sftpTarget\":\"/uem/dev/all/clocking/inbound\",\"sftpType\": 1}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for HCM Data Loading",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "HCM Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',pipeline().parameters.fileName,'\",\n\"Object\" : \"HCM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Oracle-FUSION\",\n\"JobId\" : \"',activity('HCM Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"HCM Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('HCM Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('HCM Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('HCM Data Loading').Status,'\",\n\"Output\" : ',activity('HCM Data Loading').Output,',\n\"Error\" : ',activity('HCM Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of HCM data loading from BLOB to database\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Sending to Oracle",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',pipeline().parameters.fileName,'\",\n\"Object\" : \"HCM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Oracle-FUSION\",\n\"JobId\" : \"',activity('Send to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ORACLE\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ORACLE').Status,'\",\n\"Output\" : ',activity('Send to ORACLE').Output,',\n\"Error\" : ',activity('Send to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending file from BLOB to ORACLE SFTP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get data from TERAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for Getting Data from TERAS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get data from TERAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',pipeline().parameters.fileName,'\",\n\"Object\" : \"CLOCKING\",\n\"SourceSystem\" : \"TERAS-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Get Data From TERAS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data From TERAS\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get Data From TERAS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data From TERAS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data From TERAS').Status,'\",\n\"Output\" : ',activity('Get Data From TERAS').Output,',\n\"Error\" : ',activity('Get Data From TERAS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of Get Data From TERAS from BLOB to database\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP_FILE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.fileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.filePath",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP_FILE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.fileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.filePath",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "HCM Data Loading",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get data from TERAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_HCM_312_CLOCKING_ROW]",
							"storedProcedureParameters": {
								"filepath": {
									"value": {
										"value": "@concat(pipeline().parameters.SourceFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.fileName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_date": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"ScheduleType": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					},
					"InterfaceName": {
						"type": "string"
					},
					"ParentPipelineID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "HCM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP_FILE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HCM Data Loading')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HCM Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [
							{
								"activity": "Get data from TERAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMed_INTEGRATION_HCM/HCM.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.SourceFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.fileName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					},
					{
						"name": "Send to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "HCM Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.SourceFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.fileName),'\",\"fileName\":\"',pipeline().parameters.fileName,'\",\"sftpTarget\":\"/uem/dev/all/clocking/inbound\",\"sftpType\": 1}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for HCM Data Loading",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "HCM Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',pipeline().parameters.fileName,'\",\n\"Object\" : \"HCM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Oracle-FUSION\",\n\"JobId\" : \"',activity('HCM Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"HCM Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('HCM Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('HCM Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('HCM Data Loading').Status,'\",\n\"Output\" : ',activity('HCM Data Loading').Output,',\n\"Error\" : ',activity('HCM Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of HCM data loading from BLOB to database\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Sending to Oracle",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',pipeline().parameters.fileName,'\",\n\"Object\" : \"HCM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Oracle-FUSION\",\n\"JobId\" : \"',activity('Send to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ORACLE\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ORACLE').Status,'\",\n\"Output\" : ',activity('Send to ORACLE').Output,',\n\"Error\" : ',activity('Send to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending file from BLOB to ORACLE SFTP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get data from TERAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for Getting Data from TERAS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get data from TERAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',pipeline().parameters.fileName,'\",\n\"Object\" : \"CLOCKING\",\n\"SourceSystem\" : \"TERAS-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Get Data From TERAS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data From TERAS\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get Data From TERAS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data From TERAS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data From TERAS').Status,'\",\n\"Output\" : ',activity('Get Data From TERAS').Output,',\n\"Error\" : ',activity('Get Data From TERAS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of Get Data From TERAS from BLOB to database\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP_FILE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.fileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.filePath",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP_FILE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.fileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.filePath",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.filePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"ScheduleType": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					},
					"InterfaceName": {
						"type": "string"
					},
					"ParentPipelineID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "HCM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP_FILE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HCM_DIR SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFolderShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,'MY-KUL-UEM_DAS'),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "HCM Data Loading SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"fileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											},
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"HCM\",\n\"SourceSystem\" : \"TERAS-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameData name from EventLog el where FileNameData like ''MY-KUL-UEM_DAS%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/hcm/teras/clocking/oracle_inbound"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "clocking"
					},
					"Department": {
						"type": "string",
						"defaultValue": "teras"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "clocking"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "TERAS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "HCM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/HCM Data Loading SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HCM_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFolderShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,'MY-KUL-UEM_DAS'),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "HCM Data Loading",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"fileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											},
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"HCM\",\n\"SourceSystem\" : \"TERAS-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameData name from EventLog el where FileNameData like ''MY-KUL-UEM_DAS%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/hcm/teras/clocking/oracle_inbound"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "clocking"
					},
					"Department": {
						"type": "string",
						"defaultValue": "teras"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "clocking"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "TERAS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "HCM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/HCM Data Loading')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_249_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_249_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"SUPPLIERPAYMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/supplierPayment"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_249"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_FIN_249"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_249_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_252_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_252_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"ARINVOICE\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/arInvoice"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_252"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_FIN_252"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_252_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_253_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_253_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"ARCREDITNODE\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/arCreditNote"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_253"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "AZURE"
					}
				},
				"folder": {
					"name": "INT_FIN_253"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_253_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_254_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_254_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/invoiceReceipt"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_254"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_FIN_254"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_254_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_267')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data from Fusion SFTP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_FILE_FUS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.interfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"Customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from Fusion SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data from Fusion SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from Fusion SFTP').Status,'\",\n\"Output\" : ',activity('Get Data from Fusion SFTP').Output,',\n\"Error\" : ',activity('Get Data from Fusion SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMetadata Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetMetadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(first(activity('GetMetadata Folder').output.childItems).Name)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_CUSTOMER_Export_73267_20190515090902.zip"
					},
					"fileLocation": {
						"type": "string",
						"defaultValue": "/home/edgenta_int/test_ftp"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_267_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_267_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_FIN_267_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_267_PART_I')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.FileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"',pipeline().parameters.ScheduleType,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"',pipeline().parameters.ScheduleType,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceArchiveFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Source File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Add Log for Source File Backup",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Source File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup Source File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Source File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Source File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Source File').Status,'\",\n\"Output\" : ',activity('Backup Source File').Output,',\n\"Error\" : ',activity('Backup Source File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/stg"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_CUSTOMER_Export_45325_20190524062632.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_206')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data from Fusion SFTP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_FILE_FUS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.interfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"Project\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from Fusion SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data from Fusion SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from Fusion SFTP').Status,'\",\n\"Output\" : ',activity('Get Data from Fusion SFTP').Output,',\n\"Error\" : ',activity('Get Data from Fusion SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMetadata Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetMetadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(first(activity('GetMetadata Folder').output.childItems).Name)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_206_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_206_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/project"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_PPM_206_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_337_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFolderShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"BILLINGEVENTS\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_337"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_337"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_337_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_337_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFolderShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"BILLINGEVENTS\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_337"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_337_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_337_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_363_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFolder",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureBLOBSFTPFile",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"COSTACCRUAL\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "collexe/uem_edgenta/dev/erp/ross/fusion_inbound/costaccrual"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_363"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_363"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFolder')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFile')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_363_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_363_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFolder",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureBLOBSFTPFile",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"COSTACCRUAL\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "collexe/uem_edgenta/dev/erp/ross/fusion_inbound/costaccrual"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_363"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_363_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFolder')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFile')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_363_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_201')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data from Fusion SFTP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_FILE_FUS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.interfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"Project\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from Fusion SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data from Fusion SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from Fusion SFTP').Status,'\",\n\"Output\" : ',activity('Get Data from Fusion SFTP').Output,',\n\"Error\" : ',activity('Get Data from Fusion SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMetadata Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetMetadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(first(activity('GetMetadata Folder').output.childItems).Name)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "INT_SCM_201_ITEMS_Export_42161_20190510093915.zip"
					},
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_201_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_201_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_203')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data from Fusion SFTP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_FILE_FUS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.interfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from Fusion SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data from Fusion SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from Fusion SFTP').Status,'\",\n\"Output\" : ',activity('Get Data from Fusion SFTP').Output,',\n\"Error\" : ',activity('Get Data from Fusion SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMetadata Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetMetadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(first(activity('GetMetadata Folder').output.childItems).Name)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_1N",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "INT_SCM_203_SUPPLIER_Export_42071_20190510025758.zip"
					},
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_203"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_1N')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_203_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"SUPPLIER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_203"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_203_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"SUPPLIER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_203"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_203_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_204')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data from Fusion SFTP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_FILE_FUS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.interfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from Fusion SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data from Fusion SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from Fusion SFTP').Status,'\",\n\"Output\" : ',activity('Get Data from Fusion SFTP').Output,',\n\"Error\" : ',activity('Get Data from Fusion SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMetadata Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetMetadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(first(activity('GetMetadata Folder').output.childItems).Name)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_1_OLD",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketAgreement"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_204"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_1_OLD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_204_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketAgreement"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_204"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_204_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketAgreement"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_204"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_204_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_205_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_205"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_205"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_231_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"INVENTORYITEMCOST\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_231"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_231"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_303_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFolderShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(contains(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_303_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/approvedcop"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_303"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_SCM_303"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_303_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFolder",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@concat('collexe/',pipeline().parameters.fileLocation)",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(contains(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureBLOBSFTPFile",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@concat('collexe/',pipeline().parameters.fileLocation)",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_303_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/approvedcop"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_303"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_SCM_303_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFolder')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFile')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_340')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data from Database",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select --identifier [UniqueID],\n--CASE WHEN convert(varchar(10),creation_time,120) = convert(varchar(10),DATEADD(hh,8,last_changed,,120) THEN 'A' ELSE 'U' END [ChangeIndicator],\n--priority,\n--status,\nraised_condition [workType],\nreference_number [workTypeNumber],\nsummary [workDescription], \nconvert(varchar(10),creation_time,120) [startDateActive],\nISNULL(convert(varchar(10),DATEADD(hh,8,completed_time),120),'2099-01-01') [endDateActive]--,\n--last_changed,\n--creation_time\nfrom efsb_jobs\nwhere job_state = 'ACTIVE'\nAND DATEADD(hh,8,last_changed) >= DATEADD(mi,-30,getdate())\nAND convert(varchar(10),creation_time,120) = convert(varchar(10),DATEADD(hh,8,last_changed),120)"
							},
							"dataset": {
								"referenceName": "urbanizeDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Add Log for Get Data from Database",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data from Database",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"WORKTYPENUMBER\",\n\"SourceSystem\" : \"Urbanize-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Get Data from Database').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Record from Urbanize Database\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data from Database').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from Database').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from Database').Status,'\",\n\"Output\" : ',activity('Get Data from Database').Output,',\n\"Error\" : ',activity('Get Data from Database').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve data from Urbanize Database\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Data for Updated Record",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select --identifier [UniqueID],\n--CASE WHEN convert(varchar(10),creation_time,120) = convert(varchar(10),last_changed,120) THEN 'A' ELSE 'U' END [ChangeIndicator],\n--priority,\n--status,\nraised_condition [workType],\nreference_number [workTypeNumber],\nsummary [workDescription],\nconvert(varchar(10),creation_time,120) [startDateActive],\nISNULL(convert(varchar(10),DATEADD(hh,8,completed_time),120),'2099-01-01') [endDateActive]\n--last_changed,\n--completed_time\nfrom efsb_jobs\nwhere job_state = 'ACTIVE'\nAND DATEADD(hh,8,last_changed) >= DATEADD(mi,-30,getdate())\nAND convert(varchar(10),creation_time,120) <> convert(varchar(10),DATEADD(hh,8,last_changed),120)"
							},
							"dataset": {
								"referenceName": "urbanizeDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "WebActivity1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data for Updated Record",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"WORKTYPENUMBER\",\n\"SourceSystem\" : \"Urbanize-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Get Data for Updated Record').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Updated Record from Urbanize Database\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data for Updated Record').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data for Updated Record').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data for Updated Record').Status,'\",\n\"Output\" : ',activity('Get Data for Updated Record').Output,',\n\"Error\" : ',activity('Get Data for Updated Record').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve updated data from Urbanize Database\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Data from Database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Data from Database').output.count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Request for New Record",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/340",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{  \n   \"sourceApplicationCode\":\"EPB-URBANIZE\",\n   \"changeIndicator\":\"A\",\n   \"workOrder\":',activity('Get Data from Database').output.value,'\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "ExecutePipeline4",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Request for New Record",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "WORKTYPENUMBER",
											"SourceSystem": "Urbanize-Azure",
											"DestSystem": "UEMGroup-Oracle",
											"JobID": {
												"value": "@activity('Send Request for New Record').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": "Send Request to ORACLE for Updated Work Type Records",
											"StartTime": {
												"value": "@activity('Send Request for New Record').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Request for New Record').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@activity('Send Request for New Record').Status",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Request for New Record').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Request for New Record').Error),'',activity('Send Request for New Record').Error)",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send request to ORACLE API",
											"Input": {
												"value": "@concat('{  \n   \"sourceApplicationCode\":\"EPB-URBANIZE\",\n   \"changeIndicator\":\"A\",\n   \"workOrder\":',activity('Get Data from Database').output.value,'\n}')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition2",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Data for Updated Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Data for Updated Record').output.count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Request",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/340",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{  \n   \"sourceApplicationCode\":\"EPB-URBANIZE\",\n   \"changeIndicator\":\"U\",\n   \"workOrder\":',activity('Get Data for Updated Record').output.value,'\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "ExecutePipeline5",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Request",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "WORKTYPENUMBER",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "UEMGroup-Oracle",
											"JobID": {
												"value": "@activity('Send Request').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": "Send Request to ORACLE for Updated Work Type Records",
											"StartTime": {
												"value": "@activity('Send Request').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Request').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@activity('Send Request').Status",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Request').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Request').Error),'',activity('Send Request').Error)",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send request to ORACLE API",
											"Input": {
												"value": "@concat('{  \n   \"sourceApplicationCode\":\"EPB-URBANIZE\",\n   \"changeIndicator\":\"U\",\n   \"workOrder\":',activity('Get Data for Updated Record').output.value,'\n}')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"AddWorkTypeList": {
						"type": "Array"
					},
					"UpdateWorkTypeList": {
						"type": "Array"
					},
					"WorkTypeRecord": {
						"type": "String"
					},
					"AddWorkTypeObject": {
						"type": "String"
					},
					"UpdateWorkTypeObject": {
						"type": "String"
					},
					"ZipFileName": {
						"type": "String",
						"defaultValue": "INT_SCM_340"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/urbanizeDB')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_340_TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "File Generating",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/int/scm/204",
							"method": "POST",
							"headers": {},
							"body": {
								"eventID": "8f8bfc6e-cdec-4b72-be5a-3820ff05a407",
								"destination": "egsaasdrblob01/uem/dev/edgenta/azure/outbound/archive/destination/ross/scm/INT_SCM_204/INT_SCM_204_BLANKETAGREEMENT_Export_42128_20190510084755",
								"zipname": "INT_SCM_204_BLANKETAGREEMENT_Export_42128_20190510084755",
								"ErrorLocation": "uem/dev/edgenta/azure/outbound/log/",
								"file": "uem/dev/edgenta/azure/outbound/main/archive/scm/INT_SCM_204/INT_SCM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip/INT_SCM_204_BLANKETAGREEMENT_Export_42128_20190510084755.csv",
								"pipeline_dt": "2019-11-25 03:59:50"
							},
							"authentication": {
								"type": "Basic",
								"username": "uem_edgenta",
								"password": {
									"type": "SecureString",
									"value": "**********"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File Generating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "test",
							"value": {
								"value": "@activity('File Generating').output",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"AddWorkTypeList": {
						"type": "Array"
					},
					"UpdateWorkTypeList": {
						"type": "Array"
					},
					"WorkTypeRecord": {
						"type": "String"
					},
					"AddWorkTypeObject": {
						"type": "String"
					},
					"UpdateWorkTypeObject": {
						"type": "String"
					},
					"ZipFileName": {
						"type": "String",
						"defaultValue": "INT_SCM_340"
					},
					"test": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PROJECT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PROJECT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/PROJECT"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_1N')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Project\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FileLocation": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PROJECT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PROJECT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/PROJECT"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_206.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_206_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_206"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "project"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3_BS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Edgenta-Azure\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Edgenta-Azure\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Generate Error Log File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_ERROR_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"zipfileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/ppm/206",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_PPM_206_PROJECT]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ERROR_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"zipfileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_206"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "project"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_PPM_206_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_ERROR_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3_BS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/project\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_206_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMed_INTEGRATION_PPM/PPM_206_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/ppm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/item/fileprocessed/INT_SCM_231_INVENTORYITEMCOST_Import_46001_20190527124749.csv"
					},
					"pipelineID": {
						"type": "string",
						"defaultValue": "11ddd79b-1b88-4282-a9ee-cb2d0fc5f0ab"
					},
					"totalRow": {
						"type": "int",
						"defaultValue": 15
					},
					"successRow": {
						"type": "int",
						"defaultValue": 8
					},
					"failedRow": {
						"type": "int",
						"defaultValue": 7
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/project/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_PPM_206"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_PPM_206_PROJECT_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/ppm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_PPM_206_PROJECT_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Backup File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/ppm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/item/fileprocessed/INT_SCM_231_INVENTORYITEMCOST_Import_46001_20190527124749.csv"
					},
					"pipelineID": {
						"type": "string",
						"defaultValue": "11ddd79b-1b88-4282-a9ee-cb2d0fc5f0ab"
					},
					"totalRow": {
						"type": "int",
						"defaultValue": 15
					},
					"successRow": {
						"type": "int",
						"defaultValue": 8
					},
					"failedRow": {
						"type": "int",
						"defaultValue": 7
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/project/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_PPM_206"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_337_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "ROSSFileShareZip",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/inbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BILLINGEVENTS\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@activity('Send ACK').Status",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "inbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_337"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFileShareZip')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_337_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_337_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "ROSSFileShareZip",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/inbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BILLINGEVENTS\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@activity('Send ACK').Status",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "inbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_337_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFileShareZip')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_337_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_337_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Data Generating Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_IN_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"recursive": true
									}
								},
								{
									"name": "Encrypt File",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPEncrypt",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"passPhrase\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity8",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Encrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Encrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Encrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Encrypt File').Status,'\",\n\"Output\" : ',activity('Encrypt File').Output,',\n\"Error\" : ',activity('Encrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select sum(RowFailed) RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'') RowFailed ,(select sum(RowInsert) RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''5'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_337.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',toLower(replace(pipeline().parameters.ZipFileName,'zip','csv')))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(activity('Execute SSIS for Data Loading').Status,'Successed'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send Failed ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute SSIS for Data Loading').Status,'Succeeded'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Success ACK File Received",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup BU",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup BU",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set SSIS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select BU from (select business_unit BU from INT_PPM_337_BILEVT where PIPELINE_ID = ''',pipeline().parameters.ParentPipelineID,'''\nunion\nselect '''') a order by BU desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Send Success ACK File Received",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK File Received",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "ROSS-Azure",
								"DestSystem": "Edgenta-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK File Received').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Received ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK File Received').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK File Received').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK File Received').Error),'',string(activity('Send Success ACK File Received').Error))",
									"type": "Expression"
								},
								"EventType": "INBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_337_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Add Log For Data Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''4'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set SSIS Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSISStatus",
							"value": {
								"value": "@if(equals(and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0)),true),'1','0')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Error Desc",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select ColumnError from (\nselect ColumnError from etldataaudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'' and Status = 2\nunion\nselect '''') a\norder by ColumnError desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity9",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Error Desc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'',activity('Lookup Error Desc').output.firstRow.ColumnError),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "billingevents"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"SSISStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_337"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_IN_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_337_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Data Generating Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_IN_PART_3_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"recursive": true
									}
								},
								{
									"name": "Encrypt File",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPEncrypt",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"passPhrase\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity8",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Encrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Encrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Encrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Encrypt File').Status,'\",\n\"Output\" : ',activity('Encrypt File').Output,',\n\"Error\" : ',activity('Encrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select sum(RowFailed) RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'') RowFailed ,(select sum(RowInsert) RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''5'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Procedure for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Procedure for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute Procedure for Data Loading').Output,',\n\"Error\" : ',activity('Execute Procedure for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(activity('Execute Procedure for Data Loading').Status,'Successed'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute Procedure for Data Loading').Error,'\"','\\\"'),'\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send Failed ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute Procedure for Data Loading').Status,'Succeeded'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute Procedure for Data Loading').Error,'\"','\\\"'),'\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Success ACK File Received",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup BU",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup BU",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set SSIS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select BU from (select business_unit BU from INT_PPM_337_BILEVT where PIPELINE_ID = ''',pipeline().parameters.ParentPipelineID,'''\nunion\nselect '''') a order by BU desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Send Success ACK File Received",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK File Received",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "ROSS-Azure",
								"DestSystem": "Edgenta-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK File Received').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Received ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK File Received').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK File Received').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK File Received').Error),'',string(activity('Send Success ACK File Received').Error))",
									"type": "Expression"
								},
								"EventType": "INBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Add Log For Data Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute Logic Apps for File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Logic Apps for File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Logic Apps for File Generating').Status,'\",\n\"Output\" : ',activity('Execute Logic Apps for File Generating').Output,',\n\"Error\" : \"',activity('Execute Logic Apps for File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Logic Apps for File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/ppm/337",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute Logic Apps for File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Logic Apps for File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Logic Apps for File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('Execute Logic Apps for File Generating').Output.Status,',\"message\":\"',activity('Execute Logic Apps for File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('Execute Logic Apps for File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''4'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set SSIS Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSISStatus",
							"value": {
								"value": "@if(equals(and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0)),true),'1','0')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Error Desc",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select ColumnError from (\nselect ColumnError from etldataaudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'' and Status = 2\nunion\nselect '''') a\norder by ColumnError desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity9",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Error Desc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Procedure for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Execute Procedure for Data Loading').Output,',\n\"Error\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'',activity('Lookup Error Desc').output.firstRow.ColumnError),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Procedure for Data Loading",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_PPM_337_BILEVT]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',toLower(replace(pipeline().parameters.ZipFileName,'zip','csv')))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": null,
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "billingevents"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"SSISStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_337_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_IN_PART_3_SP')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_337_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_337_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"bilevt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Success ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU 2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_337_BILEVT where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Success ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Success ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Success ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Success ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Success ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_337_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Fusion_FlatFileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": "@variables('fileProcessedFileRoss')",
												"fileLocation": {
													"value": "@replace(pipeline().parameters.filePath,concat('/',variables('fileProcessedFileRoss')),'')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@last(split(pipeline().parameters.filePath,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"bilevt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"bilevt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "inbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/inbound/ppm/bilevt",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''6''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),' \"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_337_BILEVT where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Failed ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Failed ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Failed ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Failed ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Failed ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),' \"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send Error File to ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss')),'\",\"fileName\":\"',variables('fileProcessedFileRoss'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents/fileprocessed\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Send Error File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Send Error File to ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error File to ROSS\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Send Error File to ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error File to ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error File to ROSS').Status,'\",\n\"Output\" : ',activity('Send Error File to ROSS').Output,',\n\"Error\" : ',activity('Send Error File to ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending ORACLE Processed File to Azure SFTP for ROSS\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/billingevents/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_PPM_337"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_337"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/datasets/Fusion_FlatFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_337_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"bilevt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Success ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU 2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_337_BILEVT where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Success ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Success ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Success ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Success ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Success ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_PPM_337_BILEVT_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Fusion_FlatFileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": "@variables('fileProcessedFileRoss')",
												"fileLocation": {
													"value": "@replace(pipeline().parameters.filePath,concat('/',variables('fileProcessedFileRoss')),'')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@last(split(pipeline().parameters.filePath,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"bilevt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"bilevt\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "inbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/inbound/ppm/bilevt",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''6''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),' \"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_337_BILEVT where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Failed ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Failed ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Failed ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Failed ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Failed ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_337\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),' \"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send Error File to ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss')),'\",\"fileName\":\"',variables('fileProcessedFileRoss'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents/fileprocessed\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Send Error File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Send Error File to ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error File to ROSS\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Send Error File to ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error File to ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error File to ROSS').Status,'\",\n\"Output\" : ',activity('Send Error File to ROSS').Output,',\n\"Error\" : ',activity('Send Error File to ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending ORACLE Processed File to Azure SFTP for ROSS\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_PPM_337_BILEVT_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/billingevents/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_PPM_337"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_337_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/datasets/Fusion_FlatFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_363_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "AzureBLOBSFTPFileDef",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for Get File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',replace(pipeline().parameters.FileName,'IMPORT','Import'),'\",\n\"FileName\" : \"',replace(replace(pipeline().parameters.FileName,'IMPORT','Import'),'zip','csv'),'\",\n\"Object\" : \"COSTACCRUAL\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Get File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',pipeline().parameters.SourceSystem,' File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get File').Status,'\",\n\"Output\" : ',activity('Get File').Output,',\n\"Error\" : ',activity('Get File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .csv file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .csv and move .csv to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.FileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.FileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/Checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',tolower(replace(variables('ZipFileName'),'zip','csv')),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Customer\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by source system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity6",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Not Valid",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Not Valid",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline3",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@activity('Send ACK').Status",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFile",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFile",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "inbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_363"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFileDef')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFile')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_363_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_363_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "AzureBLOBSFTPFileDef",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for Get File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',replace(pipeline().parameters.FileName,'IMPORT','Import'),'\",\n\"FileName\" : \"',replace(replace(pipeline().parameters.FileName,'IMPORT','Import'),'zip','csv'),'\",\n\"Object\" : \"COSTACCRUAL\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Get File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',pipeline().parameters.SourceSystem,' File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get File').Status,'\",\n\"Output\" : ',activity('Get File').Output,',\n\"Error\" : ',activity('Get File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .csv file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .csv and move .csv to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.FileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@pipeline().parameters.FileName",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/Checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',tolower(replace(variables('ZipFileName'),'zip','csv')),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Customer\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by source system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity6",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Not Valid",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"ROSS-Azure\",\n\"DestSystem\" : \"Edgenta-Azure\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Not Valid",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline3",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@activity('Send ACK').Status",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.FileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"Checksum is not matched\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFile",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFile",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "inbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_363_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFileDef')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFile')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_363_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_363_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Data Generating Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_IN_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"recursive": true
									}
								},
								{
									"name": "Encrypt File",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPEncrypt",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"passPhrase\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity8",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Encrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Encrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Encrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Encrypt File').Status,'\",\n\"Output\" : ',activity('Encrypt File').Output,',\n\"Error\" : ',activity('Encrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select sum(RowFailed) RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'') RowFailed ,(select sum(RowInsert) RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''5'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_363.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',toLower(replace(pipeline().parameters.ZipFileName,'zip','csv')))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute SSIS for Data Loading').Status,'Successed'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send Failed ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute SSIS for Data Loading').Status,'Succeeded'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Success ACK File Received",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup BU",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup BU",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set SSIS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select BU from (select business_unit BU from INT_PPM_363_IMPORTCOST where PIPELINE_ID = ''',pipeline().parameters.ParentPipelineID,'''\nunion\nselect '''') a order by BU desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Send Success ACK File Received",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK File Received",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "ROSS-Azure",
								"DestSystem": "Edgenta-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK File Received').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Received ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK File Received').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK File Received').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK File Received').Error),'',string(activity('Send Success ACK File Received').Error))",
									"type": "Expression"
								},
								"EventType": "INBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_363_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Add Log For Data Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''4'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set SSIS Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSISStatus",
							"value": {
								"value": "@if(equals(and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0)),true),'1','0')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Error Desc",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select ColumnError from (\nselect ColumnError from etldataaudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'' and Status = 2\nunion\nselect '''') a\norder by ColumnError desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity9",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Error Desc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'',activity('Lookup Error Desc').output.firstRow.ColumnError),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "costaccrual"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"SSISStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_363"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_IN_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_363_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Data Generating Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_IN_PART_3_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"recursive": true
									}
								},
								{
									"name": "Encrypt File",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPEncrypt",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''),'/',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"passPhrase\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebActivity8",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Encrypt File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Encrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Encrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Encrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Encrypt File').Status,'\",\n\"Output\" : ',activity('Encrypt File').Output,',\n\"Error\" : ',activity('Encrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select sum(RowFailed) RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'') RowFailed ,(select sum(RowInsert) RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''5'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Procedure for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Procedure for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute Procedure for Data Loading').Output,',\n\"Error\" : ',activity('Execute Procedure for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute Procedure for Data Loading').Status,'Successed'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(string(activity('Execute Procedure for Data Loading').Error),'\"','\\\"'),'\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send Failed ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute Procedure for Data Loading').Status,'Succeeded'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute Procedure for Data Loading').Error,'\"','\\\"'),'\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Success ACK File Received",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup BU",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup BU",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set SSIS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select BU from (select business_unit BU from INT_PPM_363_IMPORTCOST where PIPELINE_ID = ''',pipeline().parameters.ParentPipelineID,'''\nunion\nselect '''') a order by BU desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Send Success ACK File Received",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK File Received",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "ROSS-Azure",
								"DestSystem": "Edgenta-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK File Received').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Received ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK File Received').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK File Received').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK File Received').Error),'',string(activity('Send Success ACK File Received').Error))",
									"type": "Expression"
								},
								"EventType": "INBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Add Log For Data Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute Logic Apps for File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Logic Apps for File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Logic Apps for File Generating').Status,'\",\n\"Output\" : ',activity('Execute Logic Apps for File Generating').Output,',\n\"Error\" : \"',activity('Execute Logic Apps for File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Logic Apps for File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/ppm/363",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute Logic Apps for File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Logic Apps for File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Logic Apps for File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('Execute Logic Apps for File Generating').Output.Status,',\"message\":\"',activity('Execute Logic Apps for File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('Execute Logic Apps for File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''4'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set SSIS Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSISStatus",
							"value": {
								"value": "@if(equals(and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0)),true),'1','0')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Error Desc",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select ColumnError from (\nselect ColumnError from etldataaudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'' and Status = 2\nunion\nselect '''') a\norder by ColumnError desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity9",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Error Desc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Procedure for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Execute Procedure for Data Loading').Output,',\n\"Error\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'',activity('Lookup Error Desc').output.firstRow.ColumnError),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Procedure for Data Loading",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_PPM_363_IMPORTCOST]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',toLower(replace(pipeline().parameters.ZipFileName,'zip','csv')))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": null,
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "costaccrual"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"SSISStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_363_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_IN_PART_3_SP')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_363_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_363_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Success ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU 2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_363_IMPORTCOST where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Success ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Success ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Success ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Success ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Success ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_PPM/PPM_363_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Fusion_FlatFileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": "@variables('fileProcessedFileRoss')",
												"fileLocation": {
													"value": "@replace(pipeline().parameters.filePath,concat('/',variables('fileProcessedFileRoss')),'')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@last(split(pipeline().parameters.filePath,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "inbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/inbound/ppm/costaccrual",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''6''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_363_IMPORTCOST where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Failed ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Failed ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Failed ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Failed ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Failed ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send Error File to ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss')),'\",\"fileName\":\"',variables('fileProcessedFileRoss'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_inbound/costaccrual/fileprocessed\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Send Error File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Send Error File to ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error File to ROSS\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Send Error File to ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error File to ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error File to ROSS').Status,'\",\n\"Output\" : ',activity('Send Error File to ROSS').Output,',\n\"Error\" : ',activity('Send Error File to ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending ORACLE Processed File to Azure SFTP for ROSS\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/costaccrual/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_PPM_363"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_363"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/datasets/Fusion_FlatFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_363_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Success ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU 2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_363_IMPORTCOST where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Success ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Success ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Success ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Success ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Success ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_PPM_363_IMPORTCOST_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Fusion_FlatFileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": "@variables('fileProcessedFileRoss')",
												"fileLocation": {
													"value": "@replace(pipeline().parameters.filePath,concat('/',variables('fileProcessedFileRoss')),'')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@last(split(pipeline().parameters.filePath,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "inbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/inbound/ppm/costaccrual",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''6''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_PPM_363_IMPORTCOST where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Failed ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Failed ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Failed ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Failed ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Failed ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_PPM_363\",\n\"Filename\":\"',concat(toupper(replace(pipeline().parameters.fileName,'.zip','')),'.zip'),'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send Error File to ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss')),'\",\"fileName\":\"',variables('fileProcessedFileRoss'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_inbound/costaccrual/fileprocessed\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Send Error File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Send Error File to ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error File to ROSS\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Send Error File to ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error File to ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error File to ROSS').Status,'\",\n\"Output\" : ',activity('Send Error File to ROSS').Output,',\n\"Error\" : ',activity('Send Error File to ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending ORACLE Processed File to Azure SFTP for ROSS\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_PPM_363_IMPORTCOST_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/costaccrual/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_PPM_363"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_363_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/datasets/Fusion_FlatFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get ZIP File Name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup ZIP FIle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Backup ZIP FIle",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BACKUP_ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@first(activity('Get ZIP File Name').output.childItems).Name",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Get File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get ZIP File Name').ActivityRunId,'\",\n\"ActivityTask\" : \"Get File Name\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get ZIP File Name').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get ZIP File Name').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get ZIP File Name').Status,'\",\n\"Output\" : ',activity('Get ZIP File Name').Output,',\n\"Error\" : ',activity('Get ZIP File Name').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Deflate ZIP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Deflate ZIP').Output,',\n\"Error\" : ',activity('Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"',activity('Lookup ACK Data').output.firstRow.BusinessObject,'\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',string(activity('Lookup ACK Data').output.firstRow.starttime),'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Lookup ACK Data').output.firstRow.NotificationType,'\",\n\"Output\" : \"\",\n\"Error\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/BACKUP_ZIP_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "ITEM",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_201_ITEMS_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "ITEM",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_201_ITEMS_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_201.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_201_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IfCondition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline4",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2_ECLIP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('EclipDestinationFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('EclipDestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": "eclip"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_201"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_201_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "item"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					},
					"EclipDestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/eclip"
					},
					"MyEclipDestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/myeclip"
					},
					"EclipDestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/eclip"
					},
					"MyEclipDestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/myeclip"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_2_ECLIP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_2_ECLIP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_3_ECLIP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											},
											"PackageType": "7"
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS For File Generating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''7'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Execute SSIS For File Generating",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_201_FOR_ECLIP.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
										"type": "Expression"
									}
								},
								"file": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								},
								"edsaasdrsa02": {
									"AccountKey": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					},
					{
						"name": "Add Log for File Generating",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS For File Generating",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send File Processing ACK Fail 2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS For File Generating",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Edgenta-Azure\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Processing File ACK Failure 2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail 2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send File Processing ACK Fail 2').ActivityRunId,'\",\n\"ActivityTask\" : \"Send File Processing ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send File Processing ACK Fail 2').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send File Processing ACK Fail 2').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send File Processing ACK Fail 2').Status,'\",\n\"Output\" : ',concat('{\"sourceSystem\":\"Edgenta-Azure\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BlankAggreement\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Succes ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "ITEM",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_201"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_scm_201_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					},
					"PackageType": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "item"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_3_ECLIP')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_2_ECLIP_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_3_ECLIP_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											},
											"PackageType": "7"
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "File Generating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''7'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Add Log for File Generating",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "File Generating",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send File Processing ACK Fail 2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "File Generating",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Edgenta-Azure\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('File Generating').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Processing File ACK Failure 2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail 2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send File Processing ACK Fail 2').ActivityRunId,'\",\n\"ActivityTask\" : \"Send File Processing ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send File Processing ACK Fail 2').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send File Processing ACK Fail 2').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send File Processing ACK Fail 2').Status,'\",\n\"Output\" : ',concat('{\"sourceSystem\":\"Edgenta-Azure\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BlankAggreement\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('File Generating').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Succes ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "ITEM",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK for ECLIP')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system for ECLIP",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "File Generating",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/int/scm/201/eclip",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "Basic",
								"username": "uem_edgenta",
								"password": {
									"type": "SecureString",
									"value": "**********"
								}
							}
						}
					},
					{
						"name": "Add Log for Success File Generating",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "File Generating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_201"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_scm_201_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "item"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_3_ECLIP_SP')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3_BS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select sum(RowFailed) from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select sum(RowInsert) from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK for ROSS')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system for ROSS",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Generate Error Log File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_ERROR_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"zipfileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/201",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_201_ITEMS]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ERROR_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"zipfileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "IfCondition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline4",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2_ECLIP_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('EclipDestinationFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('EclipDestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": "eclip"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_201"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT SCM_201_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "item"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					},
					"EclipDestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/eclip"
					},
					"EclipDestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/eclip"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_ERROR_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3_BS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_2_ECLIP_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT auditid,Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,''' order by auditid desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-15.southeastasia.logic.azure.com:443/workflows/fc3bfc93901240a885d4457addcb7327/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=6sKJril80D_yqfg3tL4mTr9i63X6rt-c9xDFJTMTurc",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/item\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_201_ITEMS_Export_46073_20190528000036.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "235f469c-b1d8-47fe-b852-ae2cc7bfe8ee"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/sr"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/stg"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_3_ECLIP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',activity('Get FileName').output.firstRow.Destination,'\", \"outputPath\": \"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/checksum.txt\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@replace(last(split(activity('Get FileName').Output.firstRow.Destination,'/')),'.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE PackageType = ''',pipeline().parameters.PackageType,''' and EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ECLIP Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing folder into .ZIP with unique Azure ID\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/',pipeline().parameters.DestinationSystem,'/fusion_outbound/',pipeline().parameters.Foldername,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to ECLIP SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to destination SFTP from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate ECLIP Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of checksum generating after .CSV file has generated successfully\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"PackageType": {
						"type": "string",
						"defaultValue": "2"
					},
					"DestinationSystem": {
						"type": "string",
						"defaultValue": "ross"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_3_ECLIP_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"',activity('Get FileName').output.firstRow.Destination,'/',variables('ZipFileName'),'.csv\", \"outputPath\": \"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/checksum.txt\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@replace(last(split(activity('Get FileName').Output.firstRow.Destination,'/')),'.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE PackageType = ''',pipeline().parameters.PackageType,''' and EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ECLIP Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing folder into .ZIP with unique Azure ID\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send File to BLOB SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send File to BLOB SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to ECLIP SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send File to BLOB SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send File to BLOB SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send File to BLOB SFTP').Status,'\",\n\"Output\" : ',activity('Send File to BLOB SFTP').Output,',\n\"Error\" : ',activity('Send File to BLOB SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to destination SFTP from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send File to BLOB SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/',pipeline().parameters.DestinationSystem,'/fusion_outbound/',pipeline().parameters.Foldername,'\"}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate ECLIP Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of checksum generating after .CSV file has generated successfully\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"PackageType": {
						"type": "string",
						"defaultValue": "2"
					},
					"DestinationSystem": {
						"type": "string",
						"defaultValue": "ross"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_201_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_201_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/ppm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/item/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_201"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_4_ECLIP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_201_FOR_ECLIP_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_201_FOR_ECLIP_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											}
										}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"TRANSFERECLIP\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"TRANSFERECLIP\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/item",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/eclip/fusion_outbound/item/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/eclip"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_201"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/eclip"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_4_ECLIP_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.csv'),'\",\n\"Object\" : \"Item\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_201_ITEMS_ECLIP_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.csv'),'\",\n\"Object\" : \"TRANSFERECLIP\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/item",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_201_ITEMS_ECLIP_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/eclip/fusion_outbound/item/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/eclip"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_201"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/eclip"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ECLIP"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_201_ITEMS_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/item",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "WebActivity2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta-sit.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',replace(pipeline().parameters.fileName,'.zip','_fileprocessed.txt'),'\",\n\"Object\" : \"INVOICERECEIPT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"FAIL\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the failed process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_201_ITEMS_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Backup File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/item",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/item/fileprocessed/INT_SCM_231_INVENTORYITEMCOST_Import_46001_20190527124749.csv"
					},
					"pipelineID": {
						"type": "string",
						"defaultValue": "11ddd79b-1b88-4282-a9ee-cb2d0fc5f0ab"
					},
					"totalRow": {
						"type": "int",
						"defaultValue": 15
					},
					"successRow": {
						"type": "int",
						"defaultValue": 8
					},
					"failedRow": {
						"type": "int",
						"defaultValue": 7
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/item/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_201"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"SUPPLIER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_203"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_203_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_1N')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FileLocation": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"SUPPLIER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_203"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_203_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_203.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_203_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_203"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_203_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "supplier"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3_BS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('File Generating').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('File Generating').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/203",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_203_SUPPLIER]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_203"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_203_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "supplier"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_203_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3_BS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/supplier\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_203_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_203_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/ppm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/supplier/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_203"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_203_SUPPLIER_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/ppm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_203_SUPPLIER_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/supplier/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_203"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketagreement"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_1_OLD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send ACK",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',activity('Send ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check True",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Add Log for Checksum Check True",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get ZIP File Name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup ZIP FIle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Backup ZIP FIle",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BACKUP_ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@first(activity('Get ZIP File Name').output.childItems).Name",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Get File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get ZIP File Name').ActivityRunId,'\",\n\"ActivityTask\" : \"Get File Name\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get ZIP File Name').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get ZIP File Name').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get ZIP File Name').Status,'\",\n\"Output\" : ',activity('Get ZIP File Name').Output,',\n\"Error\" : ',activity('Get ZIP File Name').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Deflate ZIP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Deflate ZIP').Output,',\n\"Error\" : ',activity('Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Failed ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup Failed ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup Failed ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup Failed ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup Failed ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup Failed ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"Checksum is not matche\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Failed ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Failed Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"',activity('Lookup Failed ACK Data').output.firstRow.BusinessObject,'\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Failed ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',string(activity('Lookup Failed ACK Data').output.firstRow.starttime),'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Lookup Failed ACK Data').output.firstRow.NotificationType,'\",\n\"Output\" : \"\",\n\"Error\" : \"Checksum is not matched\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Failed ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/BACKUP_ZIP_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketagreement"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_204.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_204_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "blanketagreement"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3_BS",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Generate Error Log File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_ERROR_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"zipfileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/204",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_204_BLANKETAGREEMENT]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ERROR_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"zipfileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "blanketAgreement"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_204_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_ERROR_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3_BS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT auditid,Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,''' order by auditid desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-15.southeastasia.logic.azure.com:443/workflows/fc3bfc93901240a885d4457addcb7327/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=6sKJril80D_yqfg3tL4mTr9i63X6rt-c9xDFJTMTurc",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/blanketagreement\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_204_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_204_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'SUCCESS','FAIL'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/blanketagreement",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/blanketagreement/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_204"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_204_BLANKETAGREEMENT_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/blanketagreement",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_204_BLANKETAGREEMENT_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/blanketagreement/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_204"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_205"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_205_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_205"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_205.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_205_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_205"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_205_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "po"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_205"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/supplier\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_205"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_205_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_205_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"specialCase": {
												"value": {
													"value": "@variables('SpecialCase')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FOLDER_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@variables('InterfaceFolder')",
													"type": "Expression"
												},
												"FolderName": "processedfile",
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/project",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Get Metadata File",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": "log",
												"FileName": {
													"value": "@replace(toupper(pipeline().parameters.fileName),'ZIP','txt')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('LogFolder')",
													"type": "Expression"
												},
												"Department": "outbound"
											}
										},
										"fieldList": [
											"exists"
										]
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Metadata File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SpecialCase",
										"value": {
											"value": "@activity('Get Metadata File').output.Exists",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/po/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_205"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					},
					"SpecialCase": {
						"type": "Boolean"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure"
					}
				},
				"folder": {
					"name": "INT_SCM_205"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"INVENTORYITEMCOST\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"inventoryItemCost\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "inventoryItemCost",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,231',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "inventoryItemCost",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,231',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"inventoryItemCost\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_231"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_231_inventoryItemCost_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_231"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"value": "@variables('Password')",
											"type": "Expression"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"value": "@variables('Key')",
											"type": "Expression"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''Failed'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS for Data Loading').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(pipeline().parameters.LogFolder,replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"fileName\":\"',concat(replace(pipeline().parameters.ZipFileName,'.zip',''),'_Error_log_validation.txt'),'\",\"sftpTarget\":\"',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Send Error Log to ORACLE",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Error Log to ORACLE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Error Log to ORACLE').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error Log to ',pipeline().parameters.SourceSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Error Log to ORACLE').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error Log to ORACLE').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error Log to ORACLE').Status,'\",\n\"Output\" : ',activity('Send Error Log to ORACLE').Output,',\n\"Error\" : ',activity('Send Error Log to ORACLE').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending error log file to ',pipeline().parameters.SourceSystem,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"value": "@variables('Password')",
														"type": "Expression"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"value": "@variables('Key')",
														"type": "Expression"
													}
												}
											}
										}
									}
								},
								{
									"name": "Send File Processing ACK Fail 2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send File Processing ACK Fail 2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "Edgenta-Azure",
											"DestSystem": "ROSS-Azure",
											"JobID": {
												"value": "@activity('Send File Processing ACK Fail 2').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send File Processing ACK Fail 2').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail 2').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send File Processing ACK Fail 2').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send File Processing ACK Fail 2').Error),'',string(activity('Send File Processing ACK Fail 2').Error))",
												"type": "Expression"
											},
											"EventType": "OUTBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Execute SSIS For File Generating').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(activity('Execute SSIS For File Generating').Output.OperationErrorMessages,'\"','\\\"'),'\",\"fileLine\":\"\"}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_231"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_231_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "inventoryitemcost"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_231"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set ZipFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/GenChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(variables('ZipFileName'),'zip',''),'/',concat(variables('ZipFileName'),'.csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ZipFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@last(split(activity('Get FileName').Output.firstRow.Destination,'/'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get FileName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT Destination FROM ETLAudit WHERE EventID = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Get Checksum",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Generate Checksum').output.Response,''))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate Checksum File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select ''',activity('Generate Checksum').output.Response,'''')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_FILE_ROSS_CS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": "checksum.txt",
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compress Folder",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(variables('ZipFileName'),'.zip','')",
													"type": "Expression"
												},
												"FileName": {
													"value": "*",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.StagingFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"ZipName": {
													"value": "@concat(variables('ZipFileName'),'.zip')",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add log for Checksum File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Generate Checksum File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum File').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum File\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Generate Checksum File').Status,'\",\n\"Output\" : ',activity('Generate Checksum File').Output,',\n\"Error\" : ',activity('Generate Checksum File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Compression",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send to ROSS SFTP",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',concat(variables('ZipFileName'),'.zip'),'\",\"fileName\":\"',concat(variables('ZipFileName'),'.zip'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_outbound/inventoryitemcost\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for File Sending",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send to ROSS SFTP",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send to ROSS SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send to ROSS SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ROSS SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ROSS SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ROSS SFTP').Status,'\",\n\"Output\" : ',activity('Send to ROSS SFTP').Output,',\n\"Error\" : ',activity('Send to ROSS SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Generate Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Generate Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Generate Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Generate Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Generate Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Generate Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Generate Checksum').Output.Response,''),'Failed','Succeeded'),'\",\n\"Output\" : ',activity('Generate Checksum').Output,',\n\"Error\" : ',activity('Generate Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_231"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS_CS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/inventoryitemcost",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/inventoryitemcost/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_231"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_231"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": false
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "ROSSFileShareZip",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipeline2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipeline2",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SCM_303_PART_2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFileShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "inbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ROSSFileShareZip')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_2')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "AzureBLOBSFTPFileDef",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@concat('collexe/',pipeline().parameters.FileLocation)",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File Complete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipeline2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File Skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipeline2",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SCM_303_PART_2_SP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"ZipFileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFile",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@concat('collexe/',pipeline().parameters.FileLocation)",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Delete2",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File Skipped",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFile",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@concat('collexe/',pipeline().parameters.FileLocation)",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "inbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/inbound/ppm/project"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFileDef')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_2_SP')]",
				"[concat(variables('factoryId'), '/datasets/AzureBLOBSFTPFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Data Generating Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Compress Inner Zip File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_303_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"recursive": true
									}
								},
								{
									"name": "WebActivity8",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Inner Zip File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Inner Zip File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Compress Inner Zip File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Inner Zip File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Inner Zip File').Status,'\",\n\"Output\" : ',activity('Compress Inner Zip File').Output,',\n\"Error\" : ',activity('Compress Inner Zip File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Compress Inner Zip File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@concat(pipeline().parameters.ZipFileName,'/Attachment_files.zip')",
													"type": "Expression"
												},
												"FileName": "*",
												"FolderPath": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												},
												"ZipName": "Attachment_files.zip",
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select sum(RowFailed) RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'') RowFailed ,(select sum(RowInsert) RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''5'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : ',activity('Execute SSIS for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute SSIS for Data Loading",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_303.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "egsaasdrir",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"packageParameters": {
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									}
								},
								"FileInvoiceAll": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/invoice_header.csv')",
										"type": "Expression"
									}
								},
								"FilePoHeader": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/po_header.csv')",
										"type": "Expression"
									}
								},
								"FilePoLines": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/po_lines.csv')",
										"type": "Expression"
									}
								},
								"FileRcvHeader": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/receipt_header.csv')",
										"type": "Expression"
									}
								},
								"FileRcvLines": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/receipt_lines.csv')",
										"type": "Expression"
									}
								},
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(replace(pipeline().parameters.ZipFileName,'.csv',''),'.zip',''))",
										"type": "Expression"
									}
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									}
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									}
								},
								"zipname": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.csv','')",
										"type": "Expression"
									}
								}
							},
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"OLEDBConnection": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								},
								"edsaasdrsitsa": {
									"AccountKey": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								},
								"myConnectionDB": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								},
								"uemedblob 1": {
									"AccountKey": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute SSIS for Data Loading').Status,'Successed'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send Failed ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute SSIS for Data Loading').Status,'Succeeded'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute SSIS for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Success ACK File Received",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup BU",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup BU",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set SSIS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select BU from (select business_unit BU from INT_SCM_303_INVOICEALL where PIPELINE_ID = ''',pipeline().parameters.ParentPipelineID,'''\nunion\nselect '''') a order by BU desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Send Success ACK File Received",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK File Received",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "ROSS-Azure",
								"DestSystem": "Edgenta-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK File Received').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Received ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK File Received').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK File Received').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK File Received').Error),'',string(activity('Send Success ACK File Received').Error))",
									"type": "Expression"
								},
								"EventType": "INBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute SSIS For File Generating",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_303_GenerateFile.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"ErrorLocation": {
												"value": {
													"value": "@pipeline().parameters.LogFolder",
													"type": "Expression"
												}
											},
											"FileInvoiceAll": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/Invoice_header.csv')",
													"type": "Expression"
												}
											},
											"FilePoHeader": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/PO_Header.csv')",
													"type": "Expression"
												}
											},
											"FilePoLines": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/PO_Lines.csv')",
													"type": "Expression"
												}
											},
											"FileRcvHeader": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/Receipt_header.csv')",
													"type": "Expression"
												}
											},
											"FileRcvLines": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/Receipt_Lines.csv')",
													"type": "Expression"
												}
											},
											"destination": {
												"value": {
													"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(replace(pipeline().parameters.ZipFileName,'.csv',''),'.zip',''))",
													"type": "Expression"
												}
											},
											"file": {
												"value": {
													"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
													"type": "Expression"
												}
											},
											"pipeline_dt": {
												"value": {
													"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
													"type": "Expression"
												}
											},
											"pipeline_id": {
												"value": {
													"value": "@pipeline().parameters.ParentPipelineID",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','')",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {
											"OLEDBConnection": {
												"Password": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											},
											"edsaasdrsa02": {
												"AccountKey": {
													"value": {
														"type": "SecureString",
														"value": "**********"
													}
												}
											}
										}
									}
								},
								{
									"name": "Add Log For Data Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute SSIS For File Generating",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS For File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS For File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS For File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute SSIS For File Generating').Status,'\",\n\"Output\" : ',activity('Execute SSIS For File Generating').Output,',\n\"Error\" : \"',activity('Execute SSIS For File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''4'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set SSIS Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSISStatus",
							"value": {
								"value": "@if(equals(and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0)),true),'1','0')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Error Desc",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute SSIS for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select ColumnError from (\nselect ColumnError from etldataaudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'' and Status = 2\nunion\nselect '''') a\norder by ColumnError desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity9",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Error Desc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute SSIS for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute SSIS for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Execute SSIS for Data Loading').Output,',\n\"Error\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'',activity('Lookup Error Desc').output.firstRow.ColumnError),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "INT_303_poRecInv"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"SSISStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Data Generating Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Compress Inner Zip File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_303_PART_3_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.csv','.zip')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"recursive": true
									}
								},
								{
									"name": "WebActivity8",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Compress Inner Zip File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Inner Zip File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Compress Inner Zip File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Inner Zip File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Inner Zip File').Status,'\",\n\"Output\" : ',activity('Compress Inner Zip File').Output,',\n\"Error\" : ',activity('Compress Inner Zip File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Compress Inner Zip File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZIP_FILE_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@concat(pipeline().parameters.ZipFileName,'/Attachment_files.zip')",
													"type": "Expression"
												},
												"FileName": "*",
												"FolderPath": {
													"value": "@pipeline().parameters.SourceFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ZIP_ROSS",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip',''))",
													"type": "Expression"
												},
												"ZipName": "Attachment_files.zip",
												"FolderPath": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select sum(RowFailed) RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'') RowFailed ,(select sum(RowInsert) RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''5'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Procedure for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Procedure for Data Loading').Status,'\",\n\"Output\" : ',activity('Execute Procedure for Data Loading').Output,',\n\"Error\" : ',activity('Execute Procedure for Data Loading').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute Procedure for Data Loading').Status,'Successed'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute Procedure for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": "Send Failed Received File ACK",
								"StartTime": {
									"value": "@activity('Send Failed ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"\",\n\"Status\":\"',if(equals(activity('Execute Procedure for Data Loading').Status,'Succeeded'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"',replace(activity('Execute Procedure for Data Loading').Output.OperationErrorMessages,'\"','\\\"'),'\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Success ACK File Received",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup BU",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup BU",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set SSIS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select BU from (select business_unit BU from INT_SCM_303_INVOICEALL where PIPELINE_ID = ''',pipeline().parameters.ParentPipelineID,'''\nunion\nselect '''') a order by BU desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Add Log for Send Success ACK File Received",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK File Received",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "ROSS-Azure",
								"DestSystem": "Edgenta-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK File Received').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Received ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK File Received').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK File Received').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK File Received').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK File Received').Error),'',string(activity('Send Success ACK File Received').Error))",
									"type": "Expression"
								},
								"EventType": "INBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\n\"Business_Unit\":\"',if(empty(activity('Lookup BU').output.firstRow.BU),'',activity('Lookup BU').output.firstRow.BU),'\",\n\"Interface_ID\":\"',pipeline().parameters.InterfaceName,'\",\n\"Filename\":\"',pipeline().parameters.ZipFileName,'\",\n\"Description\":\"ACK File Received\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"',if(equals(variables('SSISStatus'),'1'),'SUCCESS','FAIL'),'\",\n\"Error_Message\":\"\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Add Log For Data Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute Logic Apps for File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Logic Apps for File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Logic Apps for File Generating').Status,'\",\n\"Output\" : ',activity('Execute Logic Apps for File Generating').Output,',\n\"Error\" : \"',activity('Execute Logic Apps for File Generating').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing SSIS via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Logic Apps for File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/303",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(replace(pipeline().parameters.ZipFileName,'.csv',''),'.zip','')),'\",\n\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.csv',''),'\",\n\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\"file\": \"\",\n\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"packagename\": \"',substring(pipeline().parameters.ZipFileName,0,indexof(pipeline().parameters.ZipFileName,'_INT')),'\"\n}')",
											"type": "Expression"
										},
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Execute Logic Apps for File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Logic Apps for File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Logic Apps for File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Execute Logic Apps for File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('Execute Logic Apps for File Generating').Output.Status,',\"message\":\"',activity('Execute Logic Apps for File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('Execute Logic Apps for File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''4'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set SSIS Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SSISStatus",
							"value": {
								"value": "@if(equals(and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0)),true),'1','0')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Error Desc",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Procedure for Data Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select ColumnError from (\nselect ColumnError from etldataaudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''4'' and Status = 2\nunion\nselect '''') a\norder by ColumnError desc')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity9",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Error Desc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Execute Procedure for Data Loading').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute SSIS for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Execute Procedure for Data Loading').ExecutionEndTime,'\",\n\"Status\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Execute Procedure for Data Loading').Output,',\n\"Error\" : \"',if(empty(activity('Lookup Error Desc').output.firstRow.ColumnError),'',activity('Lookup Error Desc').output.firstRow.ColumnError),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing SSIS in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Procedure for Data Loading",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_303]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(replace(pipeline().parameters.ZipFileName,'.csv',''),'.zip',''))",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileInvoice_Header": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/invoice_header.csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileInvoice_Lines": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/invoice_lines.csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FilePO_Header": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/po_header.csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FilePO_Lines": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/po_lines.csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileReceipt_Header": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/receipt_header.csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileReceipt_Lines": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/receipt_lines.csv')",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": null,
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.csv','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "PPM_204"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_PPM_204_BLANKETAGREEMENT_Export_42128_20190510084755.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "INT_303_poRecInv"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"SSISStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_3_SP')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Compress Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FILE_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"FileName": {
										"value": "*",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@pipeline().parameters.ZipFileName",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for File Compression",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ',pipeline().parameters.DestinationSystem,' Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing ',pipeline().parameters.DestinationSystem,' folder into .ZIP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send to ORACLE SFTP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Encrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'\",\"fileName\":\"',pipeline().parameters.ZipFileName,'\",\"sftpTarget\":\"/uem/dev/edgenta/azure/inbound/',pipeline().parameters.Department,'/',pipeline().parameters.Foldername,'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for File Sending",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Fusion-Oracle\",\n\"JobId\" : \"',activity('Send to ORACLE SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to SFTP for ',pipeline().parameters.DestinationSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ORACLE SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ORACLE SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ORACLE SFTP').Status,'\",\n\"Output\" : ',activity('Send to ORACLE SFTP').Output,',\n\"Error\" : ',activity('Send to ORACLE SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to Oracle SFTP ',pipeline().parameters.DestinationSystem,' from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Encrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrsitfc01.azurewebsites.net/api/PGPEncrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'\",\"passPhrase\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Encrypt FIle",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Encrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Encrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Encrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Encrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Encrypt File').Status,'\",\n\"Output\" : ',activity('Encrypt File').Output,',\n\"Error\" : ',activity('Encrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_TRIGGER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_3T')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Compress Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FILE_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"FileName": {
										"value": "*",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@pipeline().parameters.ZipFileName",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for File Compression",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ',pipeline().parameters.DestinationSystem,' Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing ',pipeline().parameters.DestinationSystem,' folder into .ZIP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_3_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Compress Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"enableSkipIncompatibleRow": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FILE_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"FileName": {
										"value": "*",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_ROSS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@pipeline().parameters.ZipFileName",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.DestinationFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log for File Compression",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Compress Folder').ActivityRunId,'\",\n\"ActivityTask\" : \"Compress ',pipeline().parameters.DestinationSystem,' Folder\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Compress Folder').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Compress Folder').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Compress Folder').Status,'\",\n\"Output\" : ',activity('Compress Folder').Output,',\n\"Error\" : ',activity('Compress Folder').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of compressing ',pipeline().parameters.DestinationSystem,' folder into .ZIP\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send to ORACLE SFTP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Encrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/sftp/oracle",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'\",\"fileName\":\"',pipeline().parameters.ZipFileName,'\",\"sftpTarget\":\"/uem/dev/edgenta/azure/inbound/',pipeline().parameters.Department,'/',pipeline().parameters.Foldername,'\",\"sftpType\": 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for File Sending",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"Fusion-Oracle\",\n\"JobId\" : \"',activity('Send to ORACLE SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Send zip file to SFTP for ',pipeline().parameters.DestinationSystem,'\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send to ORACLE SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send to ORACLE SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send to ORACLE SFTP').Status,'\",\n\"Output\" : ',activity('Send to ORACLE SFTP').Output,',\n\"Error\" : ',activity('Send to ORACLE SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of sending .ZIP to Oracle SFTP ',pipeline().parameters.DestinationSystem,' from BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Encrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Compress Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrsitfc01.azurewebsites.net/api/PGPEncrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'\",\"passPhrase\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Encrypt FIle",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Encrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Encrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Encrypt ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Encrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Encrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Encrypt File').Status,'\",\n\"Output\" : ',activity('Encrypt File').Output,',\n\"Error\" : ',activity('Encrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of encrypt ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send to ORACLE SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_12345_20190513211645.zip"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"Foldername": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZIP_FILE_ROSS')]",
				"[concat(variables('factoryId'), '/datasets/ZIP_ROSS')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_TRIGGER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_303_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Success ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU 2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_SCM_303_INVOICEALL  where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Send Success ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Success ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Success ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Success ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Success ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Success ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_303_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Fusion_FlatFileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@replace(pipeline().parameters.filePath,concat('/',variables('fileProcessedFileRoss')),'')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@last(split(pipeline().parameters.filePath,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ORACLE Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ORACLE processed file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ORACLE Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of loading ORACLE Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "inbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/inbound/scm/INT_303_poRecInv",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''6''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_SCM_303_INVOICEALL  where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Failed ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Failed ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Failed ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Failed ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Failed ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send Error File to ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss')),'\",\"fileName\":\"',variables('fileProcessedFileRoss'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_inbound/approvedcop/fileprocessed\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Send Error File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Send Error File to ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error File to ROSS\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Send Error File to ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error File to ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error File to ROSS').Status,'\",\n\"Output\" : ',activity('Send Error File to ROSS').Output,',\n\"Error\" : ',activity('Send Error File to ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending ORACLE Processed File to Azure SFTP for ROSS\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/log/scm/INT_303_poRecInv"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_303"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/datasets/Fusion_FlatFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_303_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Success ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU 2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_SCM_303_INVOICEALL  where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Send Success ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Success ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Success ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Success ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Success ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Success ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU 2').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"SUCCESS\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"\"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_303_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Fusion_FlatFileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@replace(pipeline().parameters.filePath,concat('/',variables('fileProcessedFileRoss')),'')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@last(split(pipeline().parameters.filePath,'/'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ORACLE Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ORACLE processed file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "inbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/inbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/inbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/inbound/scm/INT_303_poRecInv",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''6''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup BU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAckROSS",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup BU",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select business_unit BU from INT_SCM_303_INVOICEALL  where PIPELINE_ID = ''',variables('LookupPipelineID'),'''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Add Log for Failed ACK",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EventID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"EventName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"FileZipName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"Object": "PO",
											"SourceSystem": "ROSS-Azure",
											"DestSystem": "Edgenta-Azure",
											"JobID": {
												"value": "@activity('Send Failed ACK').ActivityRunId",
												"type": "Expression"
											},
											"ActivityTask": {
												"value": "@concat('Send File Processed ',variables('SourceSystem'),' ACK')",
												"type": "Expression"
											},
											"StartTime": {
												"value": "@activity('Send Failed ACK').ExecutionStartTime",
												"type": "Expression"
											},
											"EndTime": {
												"value": "@activity('Send Failed ACK').ExecutionEndTime",
												"type": "Expression"
											},
											"Status": {
												"value": "@if(contains('200,201,202,204',string(activity('Send Failed ACK').Output.Status)),'Succeeded','Failed')",
												"type": "Expression"
											},
											"Output": {
												"value": "@activity('Send Failed ACK').output",
												"type": "Expression"
											},
											"Error": {
												"value": "@if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error))",
												"type": "Expression"
											},
											"EventType": "INBOUND",
											"FilePath": "The step describes the process of send the success message of received file via API of source system",
											"Input": {
												"value": "@concat('{\n\"Business_Unit\":\"',activity('Lookup BU').output.firstRow.BU,'\",\n\"Interface_ID\":\"INT_SCM_303\",\n\"Filename\":\"',pipeline().parameters.fileName,'\",\n\"Description\":\"ACK File Processed\",\n\"Run_Date\":\"\",\n\"Status\":\"FAIL\",\n\"Error_Message\":\"\",\n\"Error_Filename\":\"',variables('fileProcessedFileRoss'),'\"\n}')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send Error File to ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/sftp/ross",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\"blobPath\":\"/egsaasdrblob01/',concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss')),'\",\"fileName\":\"',variables('fileProcessedFileRoss'),'\",\"sftpTarget\":\"/uem_edgenta/dev/erp/ross/fusion_inbound/approvedcop/fileprocessed\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Send Error File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Error File to ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"costaccrual\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"UEMGroup-Oracle\",\n\"JobId\" : \"',activity('Send Error File to ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Error File to ROSS\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Send Error File to ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Error File to ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Error File to ROSS').Status,'\",\n\"Output\" : ',activity('Send Error File to ROSS').Output,',\n\"Error\" : ',activity('Send Error File to ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of sending ORACLE Processed File to Azure SFTP for ROSS\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_303_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/log/scm/INT_303_poRecInv"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_303"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_303_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/datasets/Fusion_FlatFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADHOC_BLOB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"FileLocation": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('ADHOC_BLOB_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ADHOC_BLOB_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBLOBSFTPFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileLocation": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FileLocation",
							"type": "Expression"
						},
						"container": "sftp"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBLOBSFTPFileDef')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileLocation": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FileLocation",
							"type": "Expression"
						},
						"container": "sftp"
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBLOBSFTPFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileLocation": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().FileLocation",
							"type": "Expression"
						},
						"container": "sftp"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BACKUP_ZIP_FUSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": "[parameters('BACKUP_ZIP_FUSION_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELIMITED_TEXT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"PathFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@if(equals(dataset().InterfaceFolder,'-1'),concat(dataset().PathFolder,'/',dataset().Department),concat(dataset().PathFolder,'/',dataset().Department,'/',dataset().InterfaceFolder))",
							"type": "Expression"
						},
						"container": "egsaasdrblob01"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_FUSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"PathFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('FILE_FUSION_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('FILE_FUSION_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FOLDER_FUSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "-1"
					},
					"PathFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": {
						"value": "[parameters('FOLDER_FUSION_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FOLDER_ROSS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "-1"
					},
					"PathFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": {
						"value": "[parameters('FOLDER_ROSS_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FUSION_FileShare')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fusionSftp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"fileLocation": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					},
					"fileName": {
						"value": "[parameters('FUSION_FileShare_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('FUSION_FileShare_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fusionSftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fusion_FlatFileShare')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fusionSftp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"fileLocation": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('Fusion_FlatFileShare_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('Fusion_FlatFileShare_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fusionSftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fusion_FolderShare')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fusionSftp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileLocation": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"fileName": "[parameters('Fusion_FolderShare_properties_typeProperties_fileName')]",
					"folderPath": {
						"value": "[parameters('Fusion_FolderShare_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fusionSftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOG_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "edsaasdrdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AuditID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventID",
						"type": "varchar"
					},
					{
						"name": "PackageID",
						"type": "varchar"
					},
					{
						"name": "ZipFile",
						"type": "varchar"
					},
					{
						"name": "SourceSystem",
						"type": "varchar"
					},
					{
						"name": "Destination",
						"type": "varchar"
					},
					{
						"name": "BusinessObject",
						"type": "varchar"
					},
					{
						"name": "ErrorLocation",
						"type": "varchar"
					},
					{
						"name": "PathRef",
						"type": "varchar"
					},
					{
						"name": "AuditType",
						"type": "varchar"
					},
					{
						"name": "PackageType",
						"type": "varchar"
					},
					{
						"name": "StartTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RowCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RowInsert",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RowUpdate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RowDelete",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RowFailed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "ExecStatus",
						"type": "varchar"
					},
					{
						"name": "ExecMessage",
						"type": "varchar"
					},
					{
						"name": "ExecGUID",
						"type": "uniqueidentifier"
					},
					{
						"name": "Killed",
						"type": "varchar"
					},
					{
						"name": "VerBuild",
						"type": "varchar"
					},
					{
						"name": "rowGuid",
						"type": "uniqueidentifier"
					},
					{
						"name": "CreatedBy",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastUpdate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UpdateBy",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[ETLAudit]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OUT_ARCHIVE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Department": {
						"type": "string"
					},
					"InterfaceName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": {
						"value": "[parameters('OUT_ARCHIVE_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OUT_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Department": {
						"type": "string"
					},
					"InterfaceName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate"
					},
					"folderPath": {
						"value": "[parameters('OUT_SOURCE_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OUT_SOURCE_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Department": {
						"type": "string"
					},
					"InterfaceName": {
						"type": "string"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "-1"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate"
					},
					"fileName": {
						"value": "[parameters('OUT_SOURCE_FILE_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('OUT_SOURCE_FILE_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OUT_STAGING')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Department": {
						"type": "string"
					},
					"InterfaceName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": {
						"value": "[parameters('OUT_STAGING_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OUT_STAGING_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Department": {
						"type": "string"
					},
					"InterfaceName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('OUT_STAGING_FILE_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('OUT_STAGING_FILE_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ROSSFileShare')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ROSSSftp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileLocation": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('ROSSFileShare_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ROSSFileShare_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ROSSSftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ROSSFileShareZip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ROSSSftp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileLocation": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate"
					},
					"fileName": {
						"value": "[parameters('ROSSFileShareZip_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ROSSFileShareZip_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ROSSSftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ROSSFolderShare')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ROSSSftp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileLocation": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"fileName": "[parameters('ROSSFolderShare_properties_typeProperties_fileName')]",
					"folderPath": {
						"value": "[parameters('ROSSFolderShare_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ROSSSftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZIP_FILE_FUS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"PathFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"folderPath": {
						"value": "[parameters('ZIP_FILE_FUS_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZIP_FILE_FUSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"PathFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate"
					},
					"folderPath": {
						"value": "[parameters('ZIP_FILE_FUSION_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZIP_FILE_ROSS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "-1"
					},
					"FileName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('ZIP_FILE_ROSS_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ZIP_FILE_ROSS_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZIP_FILE_ROSS_CS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "-1"
					},
					"FileName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": {
						"value": "[parameters('ZIP_FILE_ROSS_CS_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ZIP_FILE_ROSS_CS_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZIP_FUSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"ZipName": {
						"type": "string"
					},
					"PathFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate"
					},
					"fileName": {
						"value": "[parameters('ZIP_FUSION_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ZIP_FUSION_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZIP_ROSS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"ZipName": {
						"type": "string",
						"defaultValue": "-1"
					},
					"FolderPath": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"compression": {
						"type": "ZipDeflate",
						"level": "Fastest"
					},
					"fileName": {
						"value": "[parameters('ZIP_ROSS_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ZIP_ROSS_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZIP_ROSS_FOR_SFTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "egsaasdrBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InterfaceFolder": {
						"type": "string"
					},
					"ZipName": {
						"type": "string",
						"defaultValue": "-1"
					},
					"FolderPath": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"fileName": {
						"value": "[parameters('ZIP_ROSS_FOR_SFTP_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('ZIP_ROSS_FOR_SFTP_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/egsaasdrBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/urbanizeDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "urbanizedb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "identifier",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "reference_number",
						"type": "varchar"
					},
					{
						"name": "summary",
						"type": "varchar"
					},
					{
						"name": "description",
						"type": "varchar"
					},
					{
						"name": "raised_condition",
						"type": "varchar"
					},
					{
						"name": "external_reference",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "creation_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "tolerance",
						"type": "int",
						"precision": 10
					},
					{
						"name": "due_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "due_time_with_tollerance",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "nearing_breach",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "response_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "response_expiration",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Response_SLA",
						"type": "varchar"
					},
					{
						"name": "completion_expiration",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "completed_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Completion_SLA",
						"type": "varchar"
					},
					{
						"name": "job_state",
						"type": "varchar"
					},
					{
						"name": "Created_Due",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "next_action",
						"type": "varchar"
					},
					{
						"name": "creator",
						"type": "varchar"
					},
					{
						"name": "assignee",
						"type": "varchar"
					},
					{
						"name": "supplier_name",
						"type": "varchar"
					},
					{
						"name": "supplier_ext_reference",
						"type": "varchar"
					},
					{
						"name": "segment",
						"type": "varchar"
					},
					{
						"name": "account",
						"type": "int",
						"precision": 10
					},
					{
						"name": "property",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_bundle_order",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Urbanise_URL",
						"type": "varchar"
					},
					{
						"name": "job_template",
						"type": "varchar"
					},
					{
						"name": "Priority",
						"type": "varchar"
					},
					{
						"name": "last_changed",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "quotation",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"tableName": "efsb_jobs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/urbanizedb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HCMSftp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('HCMSftp_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('HCMSftp_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "SecureString",
						"value": "[parameters('HCMSftp_privateKeyContent')]"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('HCMSftp_passPhrase')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeAzure01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeAzure01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ROSSSftp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('ROSSSftp_properties_typeProperties_host')]",
					"port": "2223",
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('ROSSSftp_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "SecureString",
						"value": "[parameters('ROSSSftp_privateKeyContent')]"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('ROSSSftp_passPhrase')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/edsaasdrdb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('edsaasdrdb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimeAzure01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeAzure01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/edsaasdrfc')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "https://edsaasdrfc01.azurewebsites.net",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('edsaasdrfc_functionKey')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeAzure01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeAzure01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/egsaasdrBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('egsaasdrBlobStorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimeAzure01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeAzure01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fusionSftp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('fusionSftp_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('fusionSftp_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "SecureString",
						"value": "[parameters('fusionSftp_privateKeyContent')]"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('fusionSftp_passPhrase')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/urbanizedb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('urbanizedb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/0710-Hourly10to17')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "INT_SCM_201, INT_SCM_203",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_201_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0710-Hourly10to17_properties_INT_SCM_201_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_203_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0710-Hourly10to17_properties_INT_SCM_203_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2019-10-07T02:00:00Z",
						"endTime": "2019-10-07T09:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_201_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_203_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/0710-TwoHourly10to5')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_204_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_204_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_205_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0710-TwoHourly10to5_properties_INT_SCM_205_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 2,
						"startTime": "2019-10-07T02:00:00Z",
						"endTime": "2019-10-07T09:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_204_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_205_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/0810-Hourly10to5')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_201_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0810-Hourly10to5_properties_INT_SCM_201_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_203_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0810-Hourly10to5_properties_INT_SCM_203_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2019-10-08T02:00:00Z",
						"endTime": "2019-10-08T09:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_201_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_203_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/0810-TwoHourly10to8')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_204_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_204_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_205_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_205_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_231_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0810-TwoHourly10to8_properties_INT_SCM_231_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 2,
						"startTime": "2019-10-08T02:00:00Z",
						"endTime": "2019-10-08T12:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_204_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_205_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_231_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/0910-TwoHourly10to6')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_231_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_PPM_206_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0910-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_FIN_249_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_249_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_FIN_252_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0910-TwoHourly10to6_properties_INT_FIN_252_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_205_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_interfaceName')]",
							"Department": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('0910-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 2,
						"startTime": "2019-10-09T02:00:00Z",
						"endTime": "2019-10-09T10:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_231_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_PPM_206_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_249_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_252_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_205_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1010-Hourly10to6')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_FIN_267_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1010-Hourly10to6_properties_INT_FIN_267_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2019-10-10T02:00:00Z",
						"endTime": "2019-10-10T10:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_267_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1010-TwoHourly10to6')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_205_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_231_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1010-TwoHourly10to6_properties_INT_SCM_231_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_PPM_206_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1010-TwoHourly10to6_properties_INT_PPM_206_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_FIN_254_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1010-TwoHourly10to6_properties_INT_FIN_254_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 2,
						"startTime": "2019-10-10T02:00:00Z",
						"endTime": "2019-10-10T10:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_205_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_231_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_PPM_206_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_254_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1110-Hourly10to7')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_303_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1110-Hourly10to7_properties_INT_SCM_303_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2019-10-11T02:00:00Z",
						"endTime": "2019-10-11T11:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_303_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1110-TwoHourly10to6')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "INT_FIN_253_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1110-TwoHourly10to6_properties_INT_FIN_253_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_PPM_337_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_337_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_PPM_363_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1110-TwoHourly10to6_properties_INT_PPM_363_DIR_parameters_ScheduleType')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "INT_SCM_205_DIR",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileLocation": "[parameters('1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_fileLocation')]",
							"interfaceName": "[parameters('1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_interfaceName')]",
							"Department": "[parameters('1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_Department')]",
							"ScheduleType": "[parameters('1110-TwoHourly10to6_properties_INT_SCM_205_DIR_parameters_ScheduleType')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 2,
						"startTime": "2019-10-11T02:00:00Z",
						"endTime": "2019-10-11T10:01:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/INT_FIN_253_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_PPM_337_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_PPM_363_DIR')]",
				"[concat(variables('factoryId'), '/pipelines/INT_SCM_205_DIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/egsaasdrir')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Southeast Asia",
						"nodeSize": "Standard_D8_v3",
						"numberOfNodes": 1,
						"maxParallelExecutionsPerNode": 5
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('egsaasdrir_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('egsaasdrir_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('egsaasdrir_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": "S1"
						},
						"edition": "Standard",
						"licenseType": "LicenseIncluded"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeAzure01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Southeast Asia",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLiveInMinutes": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_205_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_205"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_205"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_205_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_231_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"INVENTORYITEMCOST\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_231"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fusion_FolderShare')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"INVENTORYITEMCOST\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"inventoryItemCost\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "inventoryItemCost",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,231',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "inventoryItemCost",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,231',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"inventoryItemCost\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_231"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_231_inventoryItemCost_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FUSION_FileShare')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_SOURCE_BACKUP')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										},
										"projectConnectionManagers": {},
										"packageConnectionManagers": {}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/inventoryitemcost",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/inventoryitemcost/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_231"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/egsaasdrir')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROCESSED_FILE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If INT_FIN_267",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_267')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_201",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(pipeline().parameters.fileName,'INT_SCM_201'),contains(pipeline().parameters.stepname,'ROSS'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_204",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_204')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline3",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_203",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_203')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline4",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_206",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_PPM_206')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline5",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_337",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_PPM_337')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline7",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_363",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_PPM_363')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline8",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_231",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_231')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline9",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_205",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_205')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline6",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_303",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_303')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline10",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_303_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_249",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_249')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline11",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_249_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_252",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_252')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline12",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_252_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_253",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_253')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline13",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_253_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_254",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_254')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline14",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_254_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_201_ECLIP",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(pipeline().parameters.fileName,'INT_SCM_201'),contains(pipeline().parameters.stepname,'ECLIP'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline2_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_4_ECLIP_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string",
						"defaultValue": "sftp/collexe/uem_edgenta/dev/erp/ross/fusion_outbound/project/fileprocessed/INT_PPM_206_PROJECT_EXPORT_53015_20191008042701_fileprocessed.csv"
					},
					"pipelineID": {
						"type": "string",
						"defaultValue": "4afc8608-f6a5-48b9-9877-de7012b62a2f"
					},
					"totalRow": {
						"type": "int",
						"defaultValue": 0
					},
					"failedRow": {
						"type": "int",
						"defaultValue": 1
					},
					"successRow": {
						"type": "int",
						"defaultValue": 0
					},
					"fileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_EXPORT_53015_20190704042701.zip"
					},
					"status": {
						"type": "string",
						"defaultValue": "FAIL"
					},
					"stepname": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FIN_267_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_204_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_203_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_206_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_337_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/PPM_363_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_303_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_249_PART_4')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_252_PART_4')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_253_PART_4')]",
				"[concat(variables('factoryId'), '/pipelines/FIN_254_PART_4')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_201_PART_4_ECLIP_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Generate Error Log File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_ERROR_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"zipfileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/205",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"linkedServices": [],
										"datasets": [],
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_205_PO]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ERROR_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"zipfileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_205"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_205_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "PO"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_ERROR_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Generate Error Log File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_ERROR_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"zipfileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/231",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"linkedServices": [],
										"datasets": [],
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_231_INVENTORYITEMCOST]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ERROR_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"zipfileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_231"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_231_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "inventoryitemcost"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/API_LOG')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_ERROR_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_PART_3')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]",
				"[concat(variables('factoryId'), '/datasets/FOLDER_FUSION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_205_PO_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/po",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_205_PO_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/po/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_205"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOG_TABLE')]",
				"[concat(variables('factoryId'), '/linkedServices/edsaasdrdb')]",
				"[concat(variables('factoryId'), '/pipelines/GENERAL_FILE_BACKUP')]",
				"[concat(variables('factoryId'), '/datasets/ROSSFileShare')]",
				"[concat(variables('factoryId'), '/datasets/FILE_FUSION')]"
			]
		}
	]
}
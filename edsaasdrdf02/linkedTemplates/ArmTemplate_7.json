{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "edsaasdrdf02"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIN_267_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"CUSTOMER\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_267')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data from Fusion SFTP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZIP_FILE_FUS",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.interfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Add Log",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"Customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from Fusion SFTP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Data from Fusion SFTP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from Fusion SFTP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from Fusion SFTP').Status,'\",\n\"Output\" : ',activity('Get Data from Fusion SFTP').Output,',\n\"Error\" : ',activity('Get Data from Fusion SFTP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMetadata Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Data from Fusion SFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@variables('SourceFolder')",
										"type": "Expression"
									},
									"Department": {
										"value": "@variables('Department')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetMetadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(first(activity('GetMetadata Folder').output.childItems).Name)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_CUSTOMER_Export_73267_20190515090902.zip"
					},
					"fileLocation": {
						"type": "string",
						"defaultValue": "/home/edgenta_int/test_ftp"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "String",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_FIN_267"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_FIN_267_PART_I')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.FileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"',pipeline().parameters.ScheduleType,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"',pipeline().parameters.ScheduleType,'\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup Source File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceArchiveFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Source File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Add Log for Source File Backup",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Backup Source File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Source File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup Source File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Source File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Source File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Source File').Status,'\",\n\"Output\" : ',activity('Backup Source File').Output,',\n\"Error\" : ',activity('Backup Source File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_FIN_267"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/src"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/dest"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/src"
					},
					"Department": {
						"type": "string",
						"defaultValue": "fin"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/dest"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/stg"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_FIN_267_CUSTOMER_Export_45325_20190524062632.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/fin/customer"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "GENERAL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_337_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFolderShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"BILLINGEVENTS\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_337"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_337"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_337_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ROSSFolderShare",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"BILLINGEVENTS\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_inbound/billingevents"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_337"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_337_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_363_DIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFolder",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureBLOBSFTPFile",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"COSTACCRUAL\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "collexe/uem_edgenta/dev/erp/ross/fusion_inbound/costaccrual"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_363"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_363"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_PPM_363_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBLOBSFTPFolder",
								"type": "DatasetReference",
								"parameters": {
									"FileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureBLOBSFTPFile",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"COSTACCRUAL\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"OracleFusion\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"INBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "collexe/uem_edgenta/dev/erp/ross/fusion_inbound/costaccrual"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_363"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/destination"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/archive/destination"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/inbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					}
				},
				"folder": {
					"name": "INT_PPM_363_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PROJECT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PROJECT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/PROJECT"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_1N')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Project\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FileLocation": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPM_206_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PROJECT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PROJECT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PROJECT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_PPM_206"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "ppm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/ppm/PROJECT"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_PPM_206_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get ZIP File Name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup ZIP FIle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Backup ZIP FIle",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BACKUP_ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@first(activity('Get ZIP File Name').output.childItems).Name",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Get File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get ZIP File Name').ActivityRunId,'\",\n\"ActivityTask\" : \"Get File Name\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get ZIP File Name').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get ZIP File Name').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get ZIP File Name').Status,'\",\n\"Output\" : ',activity('Get ZIP File Name').Output,',\n\"Error\" : ',activity('Get ZIP File Name').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Deflate ZIP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Deflate ZIP').Output,',\n\"Error\" : ',activity('Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"',activity('Lookup ACK Data').output.firstRow.BusinessObject,'\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',string(activity('Lookup ACK Data').output.firstRow.starttime),'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Lookup ACK Data').output.firstRow.NotificationType,'\",\n\"Output\" : \"\",\n\"Error\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "ITEM",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_201_ITEMS_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_201_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"ITEM\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "ITEM",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_201"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_201_ITEMS_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/item"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_201_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"SUPPLIER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_203"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_203_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_1N')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"Supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK'),'\",\n\"ActivityType\" : \"1\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}'),',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FileLocation": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_203_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"SUPPLIER\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"supplier\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_203"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_203_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/supplier"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_203_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketagreement"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_1_OLD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Checksum').output.Response,'true')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send ACK",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send ACK').Status,'\",\n\"Output\" : ',activity('Send ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute SSIS",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check True",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Add Log for Checksum Check True",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get ZIP File Name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Backup ZIP FIle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"ZipName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Backup ZIP FIle",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FILE_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"PathFolder": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BACKUP_ZIP_FUSION",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@first(activity('Get ZIP File Name').output.childItems).Name",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Get File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get ZIP File Name",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get ZIP File Name').ActivityRunId,'\",\n\"ActivityTask\" : \"Get File Name\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Get ZIP File Name').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get ZIP File Name').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get ZIP File Name').Status,'\",\n\"Output\" : ',activity('Get ZIP File Name').Output,',\n\"Error\" : ',activity('Get ZIP File Name').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Deflate ZIP\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Deflate ZIP').Output,',\n\"Error\" : ',activity('Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Failed ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup Failed ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup Failed ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup Failed ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup Failed ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup Failed ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"Checksum is not matche\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Failed Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Failed ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Failed Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,FileLine,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "WebActivity1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Send Failed ACK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"',activity('Lookup Failed ACK Data').output.firstRow.BusinessObject,'\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Failed ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',string(activity('Lookup Failed ACK Data').output.firstRow.starttime),'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Lookup Failed ACK Data').output.firstRow.NotificationType,'\",\n\"Output\" : \"\",\n\"Error\" : \"Checksum is not matched\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WebActivity2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebActivity1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BlanketAggreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Failed ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "scm_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_204_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"BLANKETAGREEMENT\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "BLANKETAGREEMENT",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"BLANKETAGREEMENT\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_204"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_204_BLANKETAGREEMENT_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/blanketagreement"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_204_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}
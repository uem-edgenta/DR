{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "edsaasdrdf02"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_205_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_205"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"PO\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"PO\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_205"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_205_PO_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/po"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INT_SCM_231_DIR_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Fusion_FolderShare",
								"type": "DatasetReference",
								"parameters": {
									"fileLocation": {
										"value": "@pipeline().parameters.fileLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							]
						}
					},
					{
						"name": "Filter File Name",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Folder Metadata').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.interfaceName),\nnot(contains(activity('Lookup1').output.value,json(concat('{\"name\" : \"',item().name,'\"}')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File Name').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FUSION_FileShare",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"fileLocation": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"itemType",
											"lastModified"
										]
									}
								},
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertFileLog]",
										"storedProcedureParameters": {
											"EventID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FilePath": {
												"value": {
													"value": "@pipeline().parameters.fileLocation",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileType": {
												"value": {
													"value": "@activity('Get File Metadata').output.ItemType",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get File Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sort File",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select Filename from FileLog where Refid = ''',pipeline().RunId,''' order by lastmodifieddate')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Sort File').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_1_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.interfaceName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@variables('SourceFolder')",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@variables('DestinationFolder')",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@variables('LogFolder')",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@variables('SourceArchiveFolder')",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@variables('StagingFolder')",
												"type": "Expression"
											},
											"FileName": {
												"value": "@item().filename",
												"type": "Expression"
											},
											"FileLocation": {
												"value": "@pipeline().parameters.fileLocation",
												"type": "Expression"
											},
											"ScheduleType": {
												"value": "@pipeline().parameters.ScheduleType",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@variables('DestinationSystem')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Unprocessed File List",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Sort File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"\",\n\"Object\" : \"INVENTORYITEMCOST\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Sort File').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ',variables('SourceSystem'),' Unprocessed File List\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Sort File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Sort File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Sort File').Status,'\",\n\"Output\" : ',activity('Sort File').Output,',\n\"Error\" : ',activity('Sort File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of retrieve unprocessed file from ',variables('SourceSystem'),' SFTP folder. ',if(equals(activity('Sort File').output.count,0),'File list is empty.',''),'\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Folder Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct FileNameZip name from EventLog el where FileNameZip like ''%',pipeline().parameters.interfaceName,'%''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
					},
					"interfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_231"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"SourceFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"LogFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/log/"
					},
					"SourceArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"StagingFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/source"
					},
					"ScheduleType": {
						"type": "String",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ORACLE"
					},
					"DestinationSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_1_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_1_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get and Deflate ZIP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "FUSION_FileShare",
								"type": "DatasetReference",
								"parameters": {
									"fileName": {
										"value": "@variables('ZipFileName')",
										"type": "Expression"
									},
									"fileLocation": {
										"value": "@pipeline().parameters.FileLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FOLDER_FUSION",
								"type": "DatasetReference",
								"parameters": {
									"InterfaceFolder": {
										"value": "@pipeline().parameters.InterfaceName",
										"type": "Expression"
									},
									"FolderName": "-1",
									"PathFolder": {
										"value": "@pipeline().parameters.StagingFolder",
										"type": "Expression"
									},
									"Department": {
										"value": "@pipeline().parameters.Department",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/ValidChecksum",
							"method": "POST",
							"body": {
								"value": "@concat('{\"cksmPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/checksum.txt\",\n\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\", \"isEncrypted\":true}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If checksum is match",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('1','1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Failed ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup ACK Data Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/PostAck",
										"method": "POST",
										"body": {
											"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data Failed').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data Failed').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data Failed').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data Failed').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',activity('Lookup ACK Data Failed').output.firstRow.ErrorMessage\n,'\",\"fileLine\":\"\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log For Send ACK",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Send Failed ACK",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Send Failed ACK').ActivityRunId,'\",\n\"ActivityTask\" : \"Send Success Received File ',pipeline().parameters.SourceSystem,' ACK\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Send Failed ACK').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Send Failed ACK').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Send Failed ACK').Status,'\",\n\"Output\" : ',activity('Send Failed ACK').Output,',\n\"Error\" : \"',if(empty(activity('Send Failed ACK').Error),'',string(activity('Send Failed ACK').Error)),'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 2,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of send the error message of received file via API of ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Checksum Check",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/api/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : \"',activity('Check Checksum').Error,'\",\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup ACK Data Failed",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Add Log for Checksum Check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,''' and etl.StepName=''Check Checksum''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_2_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@variables('ZipFileName')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Add Log for Deflate ZIP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get and Deflate ZIP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"INVENTORYITEMCOST\",\n\"SourceSystem\" : \"Edgenta-Azure\",\n\"DestSystem\" : \"ROSS-Azure\",\n\"JobId\" : \"',activity('Get and Deflate ZIP').ActivityRunId,'\",\n\"ActivityTask\" : \"Get and Deflate ',pipeline().parameters.SourceSystem,' ZIP\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Get and Deflate ZIP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get and Deflate ZIP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get and Deflate ZIP').Status,'\",\n\"Output\" : ',activity('Get and Deflate ZIP').Output,',\n\"Error\" : ',activity('Get and Deflate ZIP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the .ZIP file from ',pipeline().parameters.SourceSystem,'SFTP. Deflating process will be run once retrieved the .ZIP and move .CSV to BLOB\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup ACK Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat(\n'{\"sourceSystem\":\"',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Checksum",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Check Checksum').ActivityRunId,'\",\n\"ActivityTask\" : \"Check ',pipeline().parameters.SourceSystem,' File Checksum\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Check Checksum').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Check Checksum').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Check Checksum').Status,'\",\n\"Output\" : ',activity('Check Checksum').Output,',\n\"Error\" : ',activity('Check Checksum').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of check and validate the Checksum file provided by ',pipeline().parameters.SourceSystem,' system in .ZIP file\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup ACK Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Add Log for Checksum",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select etl.starttime,source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN etl.Status = 1 THEN ''ACK'' ELSE ''ERROR'' END NotificationType,etl.ErrorMessage,'''' fileline,\nCASE WHEN etl.Status = 1 THEN '''' ELSE ''/uem/dev/edgenta/azure/outbound/log/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el inner join eventtasklog etl on el.EventID = etl.EventID\nwhere el.eventid = ''',pipeline().RunId,''' and etl.StepName=''Check ',pipeline().parameters.SourceSystem,' File Checksum''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ZipFileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Check Checksum",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PGPDecrypt",
							"method": "POST",
							"body": {
								"value": "@concat('{\"filePath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"outputPath\":\"egsaasdrblob01/',pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',variables('ZipFileName'),'/',replace(variables('ZipFileName'),'zip','csv'),'\",\"passPhrase\":\"edgentA@123\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for Decrypt File",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().RunId,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',variables('ZipFileName'),'\",\n\"FileName\" : \"',replace(variables('ZipFileName'),'zip','csv'),'\",\n\"Object\" : \"inventoryItemCost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Decrypt File').ActivityRunId,'\",\n\"ActivityTask\" : \"Decrypt ',pipeline().parameters.SourceSystem,' .csv File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Decrypt File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Decrypt File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Decrypt File').Status,'\",\n\"Output\" : ',activity('Decrypt File').Output,',\n\"Error\" : ',activity('Decrypt File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of decrypt .csv file provided by ',pipeline().parameters.SourceSystem,' system\",\n\"TotalRow\" : ',pipeline().parameters.ScheduleType,',\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup source file when completed",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Backup Source File when skipped",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If checksum is match",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_SOURCE_BACKUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"InterfaceName": {
									"value": "@pipeline().parameters.InterfaceName",
									"type": "Expression"
								},
								"ParentPipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"SourceFolder": {
									"value": "@pipeline().parameters.SourceFolder",
									"type": "Expression"
								},
								"DestinationFolder": {
									"value": "@pipeline().parameters.DestinationFolder",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"SourceArchiveFolder": {
									"value": "@pipeline().parameters.SourceArchiveFolder",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"DestinationArchiveFolder": {
									"value": "@pipeline().parameters.DestinationArchiveFolder",
									"type": "Expression"
								},
								"StagingFolder": {
									"value": "@pipeline().parameters.StagingFolder",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"FileLocation": {
									"value": "@pipeline().parameters.FileLocation",
									"type": "Expression"
								},
								"ScheduleType": {
									"value": "@pipeline().parameters.ScheduleType",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								},
								"DestinationSystem": {
									"value": "@pipeline().parameters.DestinationSystem",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failed Decrypt ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Decrypt File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"inventoryItemCost\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "inventoryItemCost",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'Send Success Received File ACK','Send Failed Received File ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,231',string(activity('Send ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send ACK').Error),'',string(activity('Send ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n'{\"sourceSystem\":\" ',activity('Lookup ACK Data').output.firstRow.source,\n'\",\"zipfileName\":\"',variables('ZipFileName')\n,'\",\"dataFileName\":\"',replace(variables('ZipFileName'),'zip','csv')\n,'\",\"errorLocation\":\"',activity('Lookup ACK Data').output.firstRow.ErrorLocation\n,'\",\"businessObject\":\"',activity('Lookup ACK Data').output.firstRow.BusinessObject\n,'\",\"notificationType\":\"',activity('Lookup ACK Data').output.firstRow.NotificationType\n,'\",\"eventOccurredTime\":\"',string(activity('Lookup ACK Data').output.firstRow.starttime)\n,'\",\"messageDescription\":\"',if(equals('ACK',activity('Lookup ACK Data').output.firstRow.NotificationType),'','Checksum is not matched'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Log for Send Failed Decrypt ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Failed Decrypt ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "inventoryItemCost",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Failed Decrypt ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Failed Decrypt ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,231',string(activity('Send Failed Decrypt ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Failed Decrypt ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Failed Decrypt ACK').Error),'',string(activity('Send Failed Decrypt ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": {
									"value": "@concat('The step describes the process of sending the failed message of processed file via API of ',pipeline().parameters.SourceSystem,'  system')",
									"type": "Expression"
								},
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.FileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.FileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"inventoryItemCost\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Decrypt File').ExecutionStartTime),'\",\n\"messageDescription\":\"Failed to Decrypt ORACLE .csv File\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "INT_SCM_231"
					},
					"ParentPipelineID": {
						"type": "string"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"DestinationFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/destination"
					},
					"LogFolder": {
						"type": "string",
						"defaultValue": "outbound/log"
					},
					"SourceArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/source"
					},
					"Department": {
						"type": "string",
						"defaultValue": "scm"
					},
					"DestinationArchiveFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/archive/destination"
					},
					"StagingFolder": {
						"type": "string",
						"defaultValue": "uem/sit/edgenta/azure/outbound/main/source"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "INT_SCM_231_inventoryItemCost_Export_43271_20190515093732.zip"
					},
					"FileLocation": {
						"type": "string",
						"defaultValue": "/uem/dev/edgenta/azure/outbound/scm/inventoryItemCost"
					},
					"ScheduleType": {
						"type": "string",
						"defaultValue": "1"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_2_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Success Status Update",
									"type": "ExecuteSSISPackage",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": "-"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load Processed File",
									"type": "ExecuteSSISPackage",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"packageLocation": {
											"packagePath": "edsaasdrssis/UEMEd_INTEGRATION_SCM/SCM_231_Load.dtsx",
											"type": "SSISDB"
										},
										"environmentPath": null,
										"connectVia": {
											"referenceName": "egsaasdrir",
											"type": "IntegrationRuntimeReference"
										},
										"loggingLevel": "Basic",
										"packageParameters": {
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												}
											},
											"failedRow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												}
											},
											"filePath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												}
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												}
											},
											"successRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												}
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												}
											},
											"zipname": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"inventoryitemcost\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',if(equals(activity('Lookup Failed Validation').output.firstRow.Status,'1'),'Succeeded','Failed'),'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Lookup Failed Validation",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/inventoryitemcost",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Lookup Failed Validation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select status from etlaudit where eventid = ''',variables('LookupPipelineID'),''' and packagetype = ''3''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "LOG_TABLE",
											"type": "DatasetReference"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/inventoryitemcost/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_231"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PROCESSED_FILE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If INT_FIN_267",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_267')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_267_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_201",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(pipeline().parameters.fileName,'INT_SCM_201'),contains(pipeline().parameters.stepname,'ROSS'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_204",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_204')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline3",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_204_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_203",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_203')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline4",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_203_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_206",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_PPM_206')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline5",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_206_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_337",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_PPM_337')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline7",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_337_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_PPM_363",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_PPM_363')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline8",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PPM_363_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_231",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_231')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline9",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_231_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_205",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_205')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline6",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_205_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_303",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_SCM_303')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline10",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_303_PART_4_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_249",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_249')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline11",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_249_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_252",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_252')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline12",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_252_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_253",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_253')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline13",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_253_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_FIN_254",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.fileName,'INT_FIN_254')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline14",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "FIN_254_PART_4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "If INT_SCM_201_ECLIP",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(pipeline().parameters.fileName,'INT_SCM_201'),contains(pipeline().parameters.stepname,'ECLIP'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePipeline2_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SCM_201_PART_4_ECLIP_SP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"filePath": {
												"value": "@pipeline().parameters.filePath",
												"type": "Expression"
											},
											"pipelineID": {
												"value": "@pipeline().parameters.pipelineID",
												"type": "Expression"
											},
											"totalRow": {
												"value": "@pipeline().parameters.totalRow",
												"type": "Expression"
											},
											"successRow": {
												"value": "@pipeline().parameters.successRow",
												"type": "Expression"
											},
											"failedRow": {
												"value": "@pipeline().parameters.failedRow",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"status": {
												"value": "@pipeline().parameters.status",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string",
						"defaultValue": "sftp/collexe/uem_edgenta/dev/erp/ross/fusion_outbound/project/fileprocessed/INT_PPM_206_PROJECT_EXPORT_53015_20191008042701_fileprocessed.csv"
					},
					"pipelineID": {
						"type": "string",
						"defaultValue": "4afc8608-f6a5-48b9-9877-de7012b62a2f"
					},
					"totalRow": {
						"type": "int",
						"defaultValue": 0
					},
					"failedRow": {
						"type": "int",
						"defaultValue": 1
					},
					"successRow": {
						"type": "int",
						"defaultValue": 0
					},
					"fileName": {
						"type": "string",
						"defaultValue": "INT_PPM_206_PROJECT_EXPORT_53015_20190704042701.zip"
					},
					"status": {
						"type": "string",
						"defaultValue": "FAIL"
					},
					"stepname": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SCM_231_PART_4_SP')]",
				"[concat(variables('factoryId'), '/pipelines/SCM_205_PART_4_SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Generate Error Log File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_ERROR_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"zipfileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/205",
										"method": "POST",
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"linkedServices": [],
										"datasets": [],
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_205_PO]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ERROR_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"zipfileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_205"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_205_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "PO"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_231_PART_2_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Load Data Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get Row Count').output.firstRow.RowFailed,0),greater(activity('Get Row Count').output.firstRow.RowInsert,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ZIP File",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_PART_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@pipeline().parameters.InterfaceName",
												"type": "Expression"
											},
											"ZipFileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"SourceFolder": {
												"value": "@pipeline().parameters.SourceFolder",
												"type": "Expression"
											},
											"DestinationFolder": {
												"value": "@pipeline().parameters.DestinationFolder",
												"type": "Expression"
											},
											"StagingFolder": {
												"value": "@pipeline().parameters.StagingFolder",
												"type": "Expression"
											},
											"SourceArchiveFolder": {
												"value": "@pipeline().parameters.SourceArchiveFolder",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@pipeline().parameters.DestinationArchiveFolder",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"Foldername": {
												"value": "@variables('Foldername')",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											},
											"DestinationSystem": {
												"value": "@pipeline().parameters.DestinationSystem",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Backup Result File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ZIP File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BlobSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"parallelCopies": 4
									},
									"inputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationArchiveFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@pipeline().parameters.ZipFileName",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								},
								{
									"name": "WebActivity7",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Backup Result File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Backup Result File').ActivityRunId,'\",\n\"ActivityTask\" : \"Backup ',pipeline().parameters.DestinationSystem,'Destination File\",\n\"ActivityType\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"StartTime\" : \"',activity('Backup Result File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Backup Result File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Backup Result File').Status,'\",\n\"Output\" : ',activity('Backup Result File').Output,',\n\"Error\" : ',activity('Backup Result File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of backup ',pipeline().parameters.DestinationSystem,' destination file in BLOB\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete2",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FOLDER_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@pipeline().parameters.InterfaceName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@pipeline().parameters.DestinationFolder",
													"type": "Expression"
												},
												"Department": {
													"value": "@pipeline().parameters.Department",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false
									}
								}
							]
						}
					},
					{
						"name": "Get Row Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If Data Loading Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select (select RowFailed from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''1'') RowFailed ,(select RowInsert from ETLAudit where eventid = ''',pipeline().parameters.ParentPipelineID,''' and PackageType = ''2'') RowInsert ')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Send File Processing ACK Fail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Add Log for SSIS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edgenta.azure-api.net/adf/AuditLog",
							"method": "POST",
							"body": {
								"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Data Loading SP').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Procedure for ',pipeline().parameters.SourceSystem,' Data Loading\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('Data Loading SP').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Data Loading SP').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Data Loading SP').Status,'\",\n\"Output\" : ',activity('Data Loading SP').Output,',\n\"Error\" : ',activity('Data Loading SP').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.SourceSystem,' data loading by executing procedure in the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get SSIS Result 2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Row Count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select top 1 etla.starttime,el.source,FileNameZip,FileNameData,el.BusinessObject,CASE WHEN a.Status IS NULL THEN ''SUCCESS'' ELSE ''ERROR'' END NotificationType,a.ErrorMessage,a.FileLine,\nCASE WHEN a.Status IS NULL THEN '''' ELSE ''',variables('OraErrorPath'),'/',pipeline().parameters.Department,'/',variables('Foldername'),'/''+replace(el.FileNameZip,''.zip'','''')+''_Error_Log.zip'' END ErrorLocation\n from eventlog el --inner join eventtasklog etl on el.EventID = etl.EventID\n inner join ETLAudit etla on el.EventID = etla.EventID\n OUTER APPLY ( select FileLine,status,ErrorMessage\n from ETLDataAudit etld where el.EventID = etld.EventID and etld.Status = ''2'') a\nwhere el.eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Send Success ACK",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSIS Result 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://edsaasdrfc01.azurewebsites.net/api/PostAck",
							"method": "POST",
							"body": {
								"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecutePipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send File Processing ACK Fail",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send File Processing ACK Fail').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send File Processing ACK Fail').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send File Processing ACK Fail').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send File Processing ACK Fail').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send File Processing ACK Fail').Error),'',string(activity('Send File Processing ACK Fail').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat('{\"sourceSystem\":\"Azure-Edgenta\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\"errorLocation\":\"\",\"businessObject\":\"',variables('Foldername'),'\",\"notificationType\":\"ERROR\",\"eventOccurredTime\":\"',string(activity('Data Loading SP').ExecutionStartTime),'\",\n\"messageDescription\":\"',replace(string(activity('Data Loading SP').Error),'\"','\\\"'),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Add Success ACK",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Send Success ACK",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "API_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EventID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"EventName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"FileZipName": {
									"value": "@variables('ZipFileName')",
									"type": "Expression"
								},
								"Object": "PO",
								"SourceSystem": "Edgenta-Azure",
								"DestSystem": "ROSS-Azure",
								"JobID": {
									"value": "@activity('Send Success ACK').ActivityRunId",
									"type": "Expression"
								},
								"ActivityTask": {
									"value": "@concat('Send File Processing ',pipeline().parameters.SourceSystem,' ACK')",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@activity('Send Success ACK').ExecutionStartTime",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@activity('Send Success ACK').ExecutionEndTime",
									"type": "Expression"
								},
								"Status": {
									"value": "@if(contains('200,201,202,204',string(activity('Send Success ACK').Output.Status)),'Succeeded','Failed')",
									"type": "Expression"
								},
								"Output": {
									"value": "@activity('Send Success ACK').output",
									"type": "Expression"
								},
								"Error": {
									"value": "@if(empty(activity('Send Success ACK').Error),'',string(activity('Send Success ACK').Error))",
									"type": "Expression"
								},
								"EventType": "OUTBOUND",
								"FilePath": "The step describes the process of send the success message of received file via API of source system",
								"Input": {
									"value": "@concat(\n\t'{\"sourceSystem\":\"',activity('Get SSIS Result 2').output.firstRow.source,\n\t'\",\"zipfileName\":\"',pipeline().parameters.ZipFileName\n\t,'\",\"dataFileName\":\"',replace(pipeline().parameters.ZipFileName,'zip','csv')\n\t,'\",\"errorLocation\":\"',activity('Get SSIS Result 2').output.firstRow.errorLocation\n\t,'\",\"businessObject\":\"',activity('Get SSIS Result 2').output.firstRow.BusinessObject\n\t,'\",\"notificationType\":\"',activity('Get SSIS Result 2').output.firstRow.NotificationType\n\t,'\",\"eventOccurredTime\":\"',string(activity('Get SSIS Result 2').output.firstRow.starttime)\n\t,'\",\"messageDescription\":\"',if(equals(activity('Get Row Count').output.firstRow.RowInsert,0),'No Data',''),'\",\"fileLine\":\"\"}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Data Loading Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup SSIS Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup SSIS Error').output.firstRow.Count,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Generate Error Log File_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_ERROR_LOG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentPipelineID": {
												"value": "@pipeline().parameters.ParentPipelineID",
												"type": "Expression"
											},
											"LogFolder": {
												"value": "@pipeline().parameters.LogFolder",
												"type": "Expression"
											},
											"zipfileName": {
												"value": "@pipeline().parameters.ZipFileName",
												"type": "Expression"
											},
											"Department": {
												"value": "@pipeline().parameters.Department",
												"type": "Expression"
											},
											"SourceSystem": {
												"value": "@pipeline().parameters.SourceSystem",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WebActivity10",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',activity('File Generating').Output,',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "File Generating",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/int/scm/231",
										"method": "POST",
										"body": {
											"value": "@concat('{\n\t\"eventID\": \"',pipeline().parameters.ParentPipelineID,'\",\n\t\"destination\": \"egsaasdrblob01/',concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',replace(pipeline().parameters.ZipFileName,'.zip','')),'\",\n\t\"zipname\": \"',replace(pipeline().parameters.ZipFileName,'.zip',''),'\",\n\t\"ErrorLocation\": \"',pipeline().parameters.LogFolder,'\",\n\t\"file\": \"',concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv')),'\",\n\t\"pipeline_dt\": \"',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),'\"\n}')",
											"type": "Expression"
										},
										"linkedServices": [],
										"datasets": [],
										"authentication": {
											"type": "Basic",
											"username": "uem_edgenta",
											"password": {
												"type": "SecureString",
												"value": "**********"
											}
										}
									}
								},
								{
									"name": "Add Log for Success File Generating",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "File Generating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',pipeline().parameters.ParentPipelineID,'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"',pipeline().parameters.ZipFileName,'\",\n\"FileName\" : \"',replace(pipeline().parameters.ZipFileName,'zip','csv'),'\",\n\"Object\" : \"arInvoice\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('File Generating').ActivityRunId,'\",\n\"ActivityTask\" : \"Execute Logic Apps For ',pipeline().parameters.DestinationSystem,' File Generating\",\n\"ActivityType\" : \"\",\n\"StartTime\" : \"',activity('File Generating').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('File Generating').ExecutionEndTime,'\",\n\"Status\" : \"',activity('File Generating').Status,'\",\n\"Output\" : ',json(concat('{\"status\":',activity('File Generating').Output.Status,',\"message\":\"',activity('File Generating').Output.Message,'\"}')),',\n\"Error\" : ',activity('File Generating').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of ',pipeline().parameters.DestinationSystem,' .CSV file generating into BLOB by executing Logic Apps via the Azure Data Factory\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup SSIS Error",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select sum(RowFailed) Count from etlaudit where PackageType = ''1'' and eventid = ''',pipeline().parameters.ParentPipelineID,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Data Loading SP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERT_INT_SCM_231_INVENTORYITEMCOST]",
							"storedProcedureParameters": {
								"destination": {
									"value": {
										"value": "@concat(pipeline().parameters.DestinationFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLocation": {
									"value": {
										"value": "@pipeline().parameters.LogFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"File": {
									"value": {
										"value": "@concat(pipeline().parameters.StagingFolder,'/',pipeline().parameters.Department,'/',pipeline().parameters.InterfaceName,'/',pipeline().parameters.ZipFileName,'/',replace(pipeline().parameters.ZipFileName,'zip','csv'))",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pass": {
									"value": "coll@123",
									"type": "String"
								},
								"pipeline_dt": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().parameters.ParentPipelineID",
										"type": "Expression"
									},
									"type": "String"
								},
								"ZipName": {
									"value": {
										"value": "@replace(pipeline().parameters.ZipFileName,'.zip','')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "edsaasdrdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Generate Error Log File",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Loading SP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GENERAL_ERROR_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentPipelineID": {
									"value": "@pipeline().parameters.ParentPipelineID",
									"type": "Expression"
								},
								"LogFolder": {
									"value": "@pipeline().parameters.LogFolder",
									"type": "Expression"
								},
								"zipfileName": {
									"value": "@pipeline().parameters.ZipFileName",
									"type": "Expression"
								},
								"Department": {
									"value": "@pipeline().parameters.Department",
									"type": "Expression"
								},
								"SourceSystem": {
									"value": "@pipeline().parameters.SourceSystem",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"InterfaceName": {
						"type": "string",
						"defaultValue": "SCM_231"
					},
					"ID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"ZipFileName": {
						"type": "string",
						"defaultValue": "INT_SCM_231_PO_Export_45193_20190523112456.zip"
					},
					"ParentPipelineID": {
						"type": "string",
						"defaultValue": "444a652b-3337-46a0-9410-79d4e88db483"
					},
					"SourceFolder": {
						"type": "string"
					},
					"DestinationFolder": {
						"type": "string"
					},
					"StagingFolder": {
						"type": "string"
					},
					"LogFolder": {
						"type": "string"
					},
					"SourceArchiveFolder": {
						"type": "string"
					},
					"DestinationArchiveFolder": {
						"type": "string"
					},
					"Department": {
						"type": "string"
					},
					"SourceSystem": {
						"type": "string"
					},
					"DestinationSystem": {
						"type": "string"
					}
				},
				"variables": {
					"ZipFileName": {
						"type": "String"
					},
					"Foldername": {
						"type": "String",
						"defaultValue": "inventoryitemcost"
					},
					"OraErrorPath": {
						"type": "String",
						"defaultValue": "/uem/dev/edgenta/azure/error"
					},
					"Password": {
						"type": "String",
						"defaultValue": "Wr=6*ABL^R1>"
					},
					"Key": {
						"type": "String",
						"defaultValue": "dYCX1swYYtqtRac5P1n9EMKw+8uKg2tXvMtoCxNOZwodLaNa2eaWL0OuDJM67Bfr9bgmBt/7AxcIdnWQ/ugHmw=="
					}
				},
				"folder": {
					"name": "INT_SCM_231_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCM_205_PART_4_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:06:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select top 1 EventID from EventLog where FileNameZip = ''',pipeline().parameters.fileName,'''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "LOG_TABLE",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Set PipelineID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Pipeline ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LookupPipelineID",
							"value": {
								"value": "@activity('Get Pipeline ID').output.firstRow.eventid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Status Success",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set PipelineID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(pipeline().parameters.status,'SUCCESS'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WebActivity1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Success Status Update",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Success Status Update').ActivityRunId,'\",\n\"ActivityTask\" : \"Update Azure Main Table Status\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Success Status Update').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Success Status Update').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Success Status Update').Status,'\",\n\"Output\" : ',activity('Success Status Update').Output,',\n\"Error\" : ',activity('Success Status Update').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of update main table status in Azure database.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Success Status Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_205_PO_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": "-",
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileProcessedFileRoss",
										"value": {
											"value": "@replace(pipeline().parameters.filePath,concat(variables('fileProcessedFolderRoss'),'/'),'')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Add Log for Get Data from ROSS",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"blanketagreement\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Get Data from ROSS').ActivityRunId,'\",\n\"ActivityTask\" : \"Get ROSS Processed Data\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Get Data from ROSS').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Get Data from ROSS').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Get Data from ROSS').Status,'\",\n\"Output\" : ',activity('Get Data from ROSS').Output,',\n\"Error\" : ',activity('Get Data from ROSS').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of locate and retrieve the ROSS validation file from SFTP.\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Backup File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "GENERAL_FILE_BACKUP",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"InterfaceName": {
												"value": "@variables('InterfaceFolder')",
												"type": "Expression"
											},
											"ParentPipelineID": {
												"value": "@variables('LookupPipelineID')",
												"type": "Expression"
											},
											"SourceFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"DestinationFolder": {
												"value": "@variables('fileProcessedFolderAzure')",
												"type": "Expression"
											},
											"LogFolder": "outbound/log",
											"SourceArchiveFolder": "uem/dev/edgenta/azure/outbound/archive/source",
											"Department": {
												"value": "@variables('Department')",
												"type": "Expression"
											},
											"DestinationArchiveFolder": {
												"value": "@variables('DestinationArchiveFolder')",
												"type": "Expression"
											},
											"StagingFolder": "uem/dev/edgenta/azure/outbound/main/source",
											"FileName": {
												"value": "@variables('fileProcessedFileRoss')",
												"type": "Expression"
											},
											"FileLocation": "/uem/dev/edgenta/azure/outbound/scm/po",
											"ScheduleType": "1",
											"SourceSystem": {
												"value": "@variables('SourceSystem')",
												"type": "Expression"
											},
											"DestinationSystem": "Azure"
										}
									}
								},
								{
									"name": "Load Processed File",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Data from ROSS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[INSERT_INT_SCM_205_PO_LOAD]",
										"storedProcedureParameters": {
											"failedrow": {
												"value": {
													"value": "@pipeline().parameters.failedRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Filepath": {
												"value": {
													"value": "@concat(variables('fileProcessedFolderAzure'),'/',variables('Department'),'/',variables('InterfaceFolder'),'/processedfile/',variables('fileProcessedFileRoss'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineID": {
												"value": {
													"value": "@variables('LookupPipelineID')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"type": "String"
											},
											"SuccessRow": {
												"value": {
													"value": "@pipeline().parameters.successRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"totalRow": {
												"value": {
													"value": "@pipeline().parameters.totalRow",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ZipName": {
												"value": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "edsaasdrdb",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Data from ROSS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:06:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "FileSystemSource",
											"recursive": true
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ROSSFileShare",
											"type": "DatasetReference",
											"parameters": {
												"FileLocation": {
													"value": "@variables('fileProcessedFolderRoss')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FILE_FUSION",
											"type": "DatasetReference",
											"parameters": {
												"InterfaceFolder": {
													"value": "@concat(variables('InterfaceFolder'),'/processedfile')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('fileProcessedFileRoss')",
													"type": "Expression"
												},
												"PathFolder": {
													"value": "@variables('fileProcessedFolderAzure')",
													"type": "Expression"
												},
												"Department": {
													"value": "@variables('Department')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Add Log for ROSS Processed File",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Load Processed File",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.06:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://edgenta.azure-api.net/adf/AuditLog",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\"EventID\" : \"',variables('LookupPipelineID'),'\",\n\"EventName\" : \"',pipeline().Pipeline,'\",\n\"FileZipName\" : \"\",\n\"FileName\" : \"',variables('fileProcessedFileRoss'),'\",\n\"Object\" : \"customer\",\n\"SourceSystem\" : \"Azure-Edgenta\",\n\"DestSystem\" : \"Azure-ROSS\",\n\"JobId\" : \"',activity('Load Processed File').ActivityRunId,'\",\n\"ActivityTask\" : \"Load ROSS Processed File\",\n\"ActivityType\" : \"',pipeline().parameters.pipelineID,'\",\n\"StartTime\" : \"',activity('Load Processed File').ExecutionStartTime,'\",\n\"EndTime\" : \"',activity('Load Processed File').ExecutionEndTime,'\",\n\"Status\" : \"',activity('Load Processed File').Status,'\",\n\"Output\" : ',activity('Load Processed File').Output,',\n\"Error\" : ',activity('Load Processed File').Error,',\n\"ErrorLoc\" : \"\",\n\"Type\" : 0,\n\"EventType\" : \"OUTBOUND\",\n\"FilePath\" : \"The step describes the process of loading ROSS Processed File to Azure database. This step include data validation and data loading\",\n\"TotalRow\" : 0,\n\"SuccessRow\" : 0,\n\"FailedRow\" : 0}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"pipelineID": {
						"type": "string"
					},
					"totalRow": {
						"type": "int"
					},
					"successRow": {
						"type": "int"
					},
					"failedRow": {
						"type": "int"
					},
					"fileName": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessedFolderRoss": {
						"type": "String",
						"defaultValue": "/uem_edgenta/dev/erp/ross/fusion_outbound/po/fileprocessed"
					},
					"fileProcessedFileRoss": {
						"type": "String"
					},
					"fileProcessedFolderAzure": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/main/destination/ross"
					},
					"Department": {
						"type": "String",
						"defaultValue": "scm"
					},
					"InterfaceFolder": {
						"type": "String",
						"defaultValue": "INT_SCM_205"
					},
					"DestinationArchiveFolder": {
						"type": "String",
						"defaultValue": "uem/dev/edgenta/azure/outbound/archive/destination/ross"
					},
					"SourceSystem": {
						"type": "String",
						"defaultValue": "ROSS"
					},
					"LookupPipelineID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "INT_SCM_205_SP"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}